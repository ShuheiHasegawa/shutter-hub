name: 🚀 Deploy to Production

on:
  # main ブランチへの push で自動デプロイ（個人開発最適化）
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'public/**'
      - 'package*.json'
      - 'next.config.ts'
      - 'tailwind.config.ts'
      - 'supabase/migrations/**'
      - '.github/workflows/deploy.yml'

  # 手動デプロイオプション
  workflow_dispatch:
    inputs:
      environment:
        description: 'デプロイ環境'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      force_deploy:
        description: '強制デプロイ（テスト失敗時も実行）'
        required: false
        default: false
        type: boolean

env:
  # Vercel設定
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  # Node.js設定
  NODE_VERSION: '20'

jobs:
  # === ビルド前チェック ===
  pre-deploy-check:
    name: 🔍 デプロイ前チェック
    runs-on: ubuntu-latest
    timeout-minutes: 10

    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      deploy_environment: ${{ steps.check.outputs.deploy_environment }}

    steps:
      - name: 📥 チェックアウト
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # 前のコミットとの比較のため

      - name: 🔍 デプロイ判定
        id: check
        run: |
          echo "=== デプロイ判定開始 ==="

          # 手動実行の場合
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "手動実行のためデプロイを実行します"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "deploy_environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            exit 0
          fi

          # 強制デプロイフラグチェック
          if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
            echo "強制デプロイフラグが有効です"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "deploy_environment=production" >> $GITHUB_OUTPUT
            exit 0
          fi

          # コミットメッセージでのスキップチェック
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          if echo "$COMMIT_MESSAGE" | grep -q "\[skip deploy\]"; then
            echo "コミットメッセージに [skip deploy] が含まれているため、デプロイをスキップします"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # 変更ファイルチェック
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
          echo "変更されたファイル:"
          echo "$CHANGED_FILES"

          # デプロイが必要な変更があるかチェック
          if echo "$CHANGED_FILES" | grep -qE "(src/|public/|package.*\.json|next\.config\.ts|tailwind\.config\.ts|supabase/migrations/)"; then
            echo "デプロイ対象のファイルが変更されています"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "deploy_environment=production" >> $GITHUB_OUTPUT
          else
            echo "デプロイ不要な変更のみです"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  # === データベースマイグレーション ===
  database-migration:
    name: 🗄️ データベースマイグレーション
    runs-on: ubuntu-latest
    needs: pre-deploy-check
    if: needs.pre-deploy-check.outputs.should_deploy == 'true'
    timeout-minutes: 10

    steps:
      - name: 📥 チェックアウト
        uses: actions/checkout@v4

      - name: 🔧 Node.js セットアップ
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 依存関係インストール
        run: npm ci

      - name: 🗄️ Supabase CLI セットアップ
        run: npm install -g @supabase/supabase-js

      - name: 🔍 マイグレーション実行前チェック
        run: |
          echo "=== マイグレーション実行前チェック ==="

          # 新しいマイグレーションファイルがあるかチェック
          if [ -d "supabase/migrations" ]; then
            MIGRATION_COUNT=$(ls -1 supabase/migrations/*.sql 2>/dev/null | wc -l)
            echo "マイグレーションファイル数: $MIGRATION_COUNT"
            
            if [ $MIGRATION_COUNT -gt 0 ]; then
              echo "✅ マイグレーションファイルが見つかりました"
              ls -la supabase/migrations/
            else
              echo "⚠️ マイグレーションファイルが見つかりません"
            fi
          else
            echo "⚠️ supabase/migrations ディレクトリが存在しません"
          fi
        continue-on-error: true

      - name: 🚀 マイグレーション実行（MCP使用）
        run: |
          echo "=== MCP経由でのマイグレーション実行 ==="
          echo "⚠️ 実際のマイグレーション実行は手動確認後に行います"
          echo "📋 マイグレーション実行手順:"
          echo "1. ローカルでMCP連携を使用してマイグレーション内容を確認"
          echo "2. Supabase Dashboardでマイグレーション状況を確認"
          echo "3. 必要に応じて手動でマイグレーション実行"
        continue-on-error: true

  # === ビルド・デプロイ ===
  deploy:
    name: 🚀 ビルド・デプロイ
    runs-on: ubuntu-latest
    needs: [pre-deploy-check, database-migration]
    if: needs.pre-deploy-check.outputs.should_deploy == 'true'
    timeout-minutes: 15

    environment:
      name: ${{ needs.pre-deploy-check.outputs.deploy_environment }}
      url: ${{ steps.deploy.outputs.deployment_url }}

    steps:
      - name: 📥 チェックアウト
        uses: actions/checkout@v4

      - name: 🔧 Node.js セットアップ
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 依存関係インストール
        run: npm ci

      - name: 🔧 Vercel CLI セットアップ
        run: npm install -g vercel@latest

      - name: 🏗️ プロダクションビルド
        run: |
          echo "=== プロダクションビルド開始 ==="
          npm run build
        env:
          # 本番環境変数
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
          NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}

          # ビルド設定
          NODE_ENV: production
          SKIP_ENV_VALIDATION: true

      - name: 🚀 Vercel デプロイ
        id: deploy
        run: |
          echo "=== Vercel デプロイ開始 ==="

          # 環境判定
          if [ "${{ needs.pre-deploy-check.outputs.deploy_environment }}" = "production" ]; then
            VERCEL_ENV="--prod"
            echo "🎯 本番環境にデプロイします"
          else
            VERCEL_ENV=""
            echo "🔧 ステージング環境にデプロイします"
          fi

          # デプロイ実行
          DEPLOYMENT_URL=$(vercel deploy \
            --token=${{ secrets.VERCEL_TOKEN }} \
            --confirm \
            $VERCEL_ENV \
            --force)

          echo "✅ デプロイ完了: $DEPLOYMENT_URL"
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

          # サマリーに追加
          echo "## 🚀 デプロイ完了" >> $GITHUB_STEP_SUMMARY
          echo "- **環境**: ${{ needs.pre-deploy-check.outputs.deploy_environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: [$DEPLOYMENT_URL]($DEPLOYMENT_URL)" >> $GITHUB_STEP_SUMMARY
          echo "- **コミット**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  # === デプロイ後ヘルスチェック ===
  post-deploy-check:
    name: 🏥 デプロイ後ヘルスチェック
    runs-on: ubuntu-latest
    needs: [pre-deploy-check, deploy]
    if: needs.pre-deploy-check.outputs.should_deploy == 'true'
    timeout-minutes: 10

    steps:
      - name: 🏥 ヘルスチェック実行
        run: |
          echo "=== デプロイ後ヘルスチェック ==="

          DEPLOYMENT_URL="${{ needs.deploy.outputs.deployment_url }}"

          if [ -z "$DEPLOYMENT_URL" ]; then
            echo "⚠️ デプロイURLが取得できませんでした"
            exit 1
          fi

          echo "🔍 ヘルスチェック対象: $DEPLOYMENT_URL"

          # 基本接続チェック
          echo "📡 基本接続チェック..."
          for i in {1..10}; do
            if curl -f -s "$DEPLOYMENT_URL" > /dev/null; then
              echo "✅ 基本接続: 成功"
              break
            fi
            echo "⏳ 待機中... ($i/10)"
            sleep 3
          done

          # APIエンドポイントチェック
          echo "🔌 APIエンドポイントチェック..."
          if curl -f -s "$DEPLOYMENT_URL/api/health" > /dev/null 2>&1; then
            echo "✅ API エンドポイント: 利用可能"
          else
            echo "⚠️ API エンドポイント: 確認できません（正常な場合もあります）"
          fi

          # パフォーマンスチェック（簡易）
          echo "⚡ パフォーマンスチェック..."
          RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' "$DEPLOYMENT_URL" || echo "測定失敗")
          echo "📊 レスポンス時間: ${RESPONSE_TIME}秒"

          # 結果サマリー
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🏥 ヘルスチェック結果" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: [$DEPLOYMENT_URL]($DEPLOYMENT_URL)" >> $GITHUB_STEP_SUMMARY
          echo "- **基本接続**: ✅ 成功" >> $GITHUB_STEP_SUMMARY
          echo "- **レスポンス時間**: ${RESPONSE_TIME}秒" >> $GITHUB_STEP_SUMMARY
          echo "- **チェック時刻**: $(date)" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true

  # === 完了通知 ===
  notify:
    name: 📢 完了通知
    runs-on: ubuntu-latest
    if: always() && needs.pre-deploy-check.outputs.should_deploy == 'true'
    needs: [pre-deploy-check, database-migration, deploy, post-deploy-check]
    timeout-minutes: 5

    steps:
      - name: 📢 デプロイ結果通知
        run: |
          echo "## 🎯 デプロイワークフロー完了" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # 各段階の結果
          echo "### 📋 実行結果" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.database-migration.result }}" = "success" ]; then
            echo "✅ **データベースマイグレーション**: 成功" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **データベースマイグレーション**: 警告またはスキップ" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "✅ **デプロイ**: 成功" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **デプロイ**: 失敗" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.post-deploy-check.result }}" = "success" ]; then
            echo "✅ **ヘルスチェック**: 成功" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **ヘルスチェック**: 警告" >> $GITHUB_STEP_SUMMARY
          fi

          # 個人開発最適化メッセージ
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 個人開発最適化" >> $GITHUB_STEP_SUMMARY
          echo "- 警告があっても開発を妨げません" >> $GITHUB_STEP_SUMMARY
          echo "- 重要な問題のみ即座に対応が必要です" >> $GITHUB_STEP_SUMMARY
          echo "- デプロイ失敗時も手動で修正・再実行可能です" >> $GITHUB_STEP_SUMMARY
