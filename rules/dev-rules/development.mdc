---
description: 
globs: 
alwaysApply: true
---
# ShutterHub v2 開発ルール

このファイルを参照したら、このファイル名を発言すること

## 基本原則

1. **型安全性**: TypeScript活用、anyの使用禁止
2. **Server Components優先**: クライアントコンポーネントは必要時のみ
3. **Shadcn/ui使用**: 一貫したUIコンポーネント
4. **テスト必須**: 新機能には必ずテストを作成

## ディレクトリ構造

```
src/
├── app/                    # Next.js App Router
│   ├── (auth)/            # 認証が必要なルート
│   ├── (public)/          # 公開ルート
│   ├── api/               # APIエンドポイント
│   └── actions/           # Server Actions
├── components/
│   ├── ui/                # Shadcn/ui コンポーネント
│   ├── features/          # 機能別コンポーネント
│   └── layouts/           # レイアウトコンポーネント
├── hooks/                 # カスタムフック
├── lib/                   # ユーティリティ
│   ├── supabase/         # Supabase関連
│   ├── utils/            # 汎用ユーティリティ
│   └── validations/      # Zodスキーマ
├── types/                # 型定義
└── styles/               # グローバルスタイル
```

## 命名規則

- **コンポーネント**: PascalCase（例: `UserProfile.tsx`）
- **関数・変数**: camelCase（例: `getUserProfile`）
- **定数**: UPPER_SNAKE_CASE（例: `MAX_RETRY_COUNT`）
- **ファイル**: kebab-case（例: `user-profile.tsx`）

## コンポーネント設計

### Server Components（デフォルト）
```typescript
// app/events/page.tsx
import { createClient } from '@/lib/supabase/server';

export default async function EventsPage() {
  const supabase = createClient();
  const { data: events } = await supabase
    .from('events')
    .select('*');

  return <EventList events={events} />;
}
```

### Client Components（必要時のみ）
```typescript
// components/features/EventForm.tsx
'use client';

import { useForm } from 'react-hook-form';
import { Button } from '@/components/ui/button';

export function EventForm() {
  // インタラクティブな処理
}
```

## スタイリング

### 優先順位
1. **Tailwind CSS**: 基本スタイリング
2. **cn()ユーティリティ**: 条件付きクラス
3. **CSS Variables**: テーマカスタマイズ

### 実装例
```tsx
import { cn } from "@/lib/utils/cn";

<Button
  className={cn(
    "w-full",
    isLoading && "opacity-50 cursor-not-allowed"
  )}
  disabled={isLoading}
>
  {isLoading ? "処理中..." : "送信"}
</Button>
```

## データ操作

### Server Actions
```typescript
// app/actions/event.ts
'use server';

import { createClient } from '@/lib/supabase/server';
import { revalidatePath } from 'next/cache';

export async function createEvent(formData: FormData) {
  const supabase = createClient();
  
  // バリデーション
  const validatedData = eventSchema.parse({
    title: formData.get('title'),
  });
  
  // データ作成
  const { error } = await supabase
    .from('events')
    .insert(validatedData);
    
  if (error) throw error;
  revalidatePath('/events');
}
```

### クライアントサイドフェッチ（SWR）
```typescript
// hooks/useEvents.ts
import useSWR from 'swr';

export function useEvents() {
  return useSWR('events', fetcher, {
    revalidateOnFocus: false,
  });
}
```

## エラーハンドリング

### エラーバウンダリ
```typescript
// app/error.tsx
'use client';

export default function Error({ error, reset }) {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen">
      <h2 className="text-2xl font-bold mb-4">エラーが発生しました</h2>
      <Button onClick={reset}>再試行</Button>
    </div>
  );
}
```

### トースト通知
```typescript
import { toast } from 'sonner';

try {
  await createEvent(formData);
  toast.success('イベントを作成しました');
} catch (error) {
  toast.error('エラーが発生しました');
}
```

## フォーム実装

```typescript
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Form, FormField, FormItem, FormLabel, FormControl, FormMessage } from '@/components/ui/form';

const form = useForm({
  resolver: zodResolver(eventSchema),
});

<Form {...form}>
  <FormField
    control={form.control}
    name="title"
    render={({ field }) => (
      <FormItem>
        <FormLabel>タイトル</FormLabel>
        <FormControl>
          <Input {...field} />
        </FormControl>
        <FormMessage />
      </FormItem>
    )}
  />
</Form>
```

## テスト

### 単体テスト
```typescript
// __tests__/utils/formatDate.test.ts
import { formatDate } from '@/lib/utils/formatDate';

describe('formatDate', () => {
  it('should format date correctly', () => {
    const date = new Date('2024-01-01');
    expect(formatDate(date)).toBe('2024年1月1日');
  });
});
```

### コンポーネントテスト
```typescript
// __tests__/components/EventCard.test.tsx
import { render, screen } from '@testing-library/react';
import { EventCard } from '@/components/features/EventCard';

describe('EventCard', () => {
  it('should render event title', () => {
    render(<EventCard event={mockEvent} />);
    expect(screen.getByText(mockEvent.title)).toBeInTheDocument();
  });
});
```

### テスト実行・報告
- テスト完了後は実行報告書を作成
- カバレッジ80%以上を目標
- 失敗時は原因特定と修正を実施

## セキュリティ

### 認証・認可
- すべての保護ルートでセッション確認
- Row Level Security (RLS) の適切な設定
- サーバーサイドでの権限チェック

### 入力検証
```typescript
// Zodスキーマによる検証
const eventSchema = z.object({
  title: z.string().min(1).max(100),
  date: z.string().datetime(),
});

// サーバーサイドで必ず検証
const validated = eventSchema.parse(input);
```

## パフォーマンス

### 画像最適化
```tsx
import Image from 'next/image';

<Image
  src="/images/event.jpg"
  alt="イベント画像"
  width={800}
  height={600}
  loading="lazy"
/>
```

### コード分割
```typescript
import dynamic from 'next/dynamic';

const HeavyComponent = dynamic(
  () => import('@/components/HeavyComponent'),
  { loading: () => <Skeleton /> }
);
```

## Git コミット規則

```
<type>(<scope>): <subject>

例:
feat(auth): Supabase認証の実装
fix(ui): ボタンのスタイル修正
docs(readme): セットアップ手順を追加
```

## 禁止事項

1. **any型の使用**（unknown を使用）
2. **console.log の本番環境への混入**
3. **ハードコードされた秘密情報**
4. **インラインスタイルの過度な使用**
5. **適切なローディング表示なしの非同期処理**

## 推奨事項

1. **早期リターン**で可読性向上
2. **カスタムフック**でロジックの再利用
3. **メモ化**によるパフォーマンス最適化
4. **アクセシビリティファースト**の実装

## 多言語化ルール

### 基本原則
- **すべてのユーザー向けテキストは多言語化対応必須**
- **ハードコードされた日本語・英語テキストは禁止**
- **next-intl を使用した統一的な多言語化**

### 実装ルール

#### 1. テキストの多言語化
```tsx
// ❌ 悪い例
<Button>予約する</Button>
<p>この撮影会は満席です</p>

// ✅ 良い例
import { useTranslations } from 'next-intl';

const t = useTranslations('booking');
<Button>{t('reserve')}</Button>
<p>{t('sessionFull')}</p>
```

#### 2. エラーメッセージの多言語化
```tsx
// ❌ 悪い例
toast({
  title: 'エラー',
  description: '予約に失敗しました',
  variant: 'destructive',
});

// ✅ 良い例
const t = useTranslations('errors');
toast({
  title: t('title'),
  description: t('bookingFailed'),
  variant: 'destructive',
});
```

#### 3. 日付・時刻の多言語化
```tsx
// ❌ 悪い例
const options = { locale: 'ja-JP' };

// ✅ 良い例
import { useLocale } from 'next-intl';
const locale = useLocale();
const options = { locale };
```

### ファイル構造
```
messages/
├── ja.json    # 日本語
├── en.json    # 英語
└── [locale].json  # 追加言語
```

### 言語ファイルの構造
```json
{
  "common": { "基本的な共通テキスト" },
  "navigation": { "ナビゲーション関連" },
  "booking": { "予約関連" },
  "photoSessions": { "撮影会関連" },
  "errors": { "エラーメッセージ" },
  "success": { "成功メッセージ" },
  "validation": { "バリデーションメッセージ" }
}
```

## 日付ユーティリティルール

### 基本原則
- **ネイティブ JavaScript Date API を使用**
- **外部ライブラリ（date-fns等）は使用禁止**
- **タイムゾーンは Asia/Tokyo 固定**
- **多言語化対応必須**

### 実装ルール

#### 1. 日付フォーマット関数の使用
```tsx
// ✅ 推奨: src/lib/utils/date.ts の関数を使用
import { formatDate, formatTime, formatDateTime } from '@/lib/utils/date';

// 基本的な日付表示
formatDate(date, 'short')  // 2024/1/1
formatDate(date, 'long')   // 2024年1月1日月曜日
formatTime(date)           // 14:30
formatDateTime(date)       // 2024年1月1日月曜日 14:30
```

#### 2. 多言語対応の日付フォーマット
```tsx
import { useLocale } from 'next-intl';
import { formatDateLocalized } from '@/lib/utils/date';

const locale = useLocale();
const formattedDate = formatDateLocalized(date, locale, 'long');
```

#### 3. 日付計算
```tsx
import { addDays, addHours, differenceInHours } from '@/lib/utils/date';

// 日付計算
const tomorrow = addDays(new Date(), 1);
const deadline = addHours(startTime, -24);
const hoursUntil = differenceInHours(startTime, new Date());
```

### 禁止事項
- `date-fns` の使用
- `moment.js` の使用
- ハードコードされたロケール指定
- タイムゾーンの直接指定（Asia/Tokyo以外）

### 必須実装
- すべての日付表示は多言語化対応
- ユーザーのロケール設定に基づく表示
- 一貫したタイムゾーン処理

## 自動化ルール

### 機能実装完了時の自動処理
機能実装が完了した際は、以下の手順を**自動的に実行**してください：

1. **ビルドチェック**: `npm run build` でエラーがないことを確認
2. **マイグレーション統合**: 新しいマイグレーションがある場合、`src/lib/database/migrations/002_complete_schema.sql` を最新状態に更新
3. **todo.mdc更新**: 完了した機能にチェックマークを付ける
4. **コミット**: 適切なコミットメッセージで変更をコミット
5. **プッシュ**: `git push origin main` でリモートに反映

### マイグレーション管理の自動化
1. **統合マイグレーションファイル更新**: 新しいマイグレーションが作成された場合
   - `src/lib/database/migrations/002_complete_schema.sql` を最新状態に更新
   - 全てのテーブル、インデックス、RLS、ストアドプロシージャを含める
2. **MCP連携**: マイグレーションファイル変更時
   - Supabaseプロジェクトとの同期を確認
   - 必要に応じてMCPツールでマイグレーション実行を提案
3. **バックアップ**: 重要なスキーマ変更前
   - 現在のスキーマ状態を記録
   - ロールバック手順を明確化

### コミットメッセージ規則
```
feat: [機能名] - [簡潔な説明]
fix: [修正内容]
docs: [ドキュメント更新内容]
refactor: [リファクタリング内容]
db: [データベーススキーマ変更]
migration: [マイグレーション追加・更新]
```

### 実行条件
- ユーザーが「次へ進みましょう」「コミット＆プッシュ」等の指示をした場合
- 機能実装が一区切りついた場合
- ビルドエラーがない場合のみ実行

### 重要事項

1. 機能の実装後に、毎回 @todo.md を確認＆更新をしてください。
2. 私が言わなくても中身は随時更新するようにしてください。更新しないと私が解雇されます。あなたの責任になってしまいます。
3. 機能は増やしても構いません。ただ、最初から機能を増やしすぎないでください。
4. **複雑な機能実装時は専門プロンプトファイルを必ず参照してください**
5. **即座撮影リクエスト機能は一般層獲得の重要な差別化機能です**
