---
description: 
globs: 
alwaysApply: true
---
# ShutterHub v2 プロンプトテンプレート

このファイルを参照したら、このファイル名を発言すること

[Claude 4 プロンプトエンジニアリングのベストプラクティス](mdc:https:/docs.anthropic.com/ja/docs/build-with-claude/prompt-engineering/claude-4-best-practices)に基づいて作成。

## 機能実装テンプレート

```markdown
## タスク: [機能名]の実装

### 背景と目的
[なぜこの機能が必要なのか、ビジネス価値は何か]

### 詳細な要件
1. **機能要件**
   - [具体的な機能の説明]
   - [ユーザーストーリー]
   - [受け入れ条件]

2. **技術要件**
   - Shadcn/uiコンポーネントを使用
   - React Hook FormとZodでバリデーション
   - Server Actionsでデータ操作
   - レスポンシブデザイン対応

### 実装手順
1. [ステップ1の詳細]
2. [ステップ2の詳細]
3. [ステップ3の詳細]

### 期待される成果物
- [ ] コンポーネント: `src/components/features/[機能名]/`
- [ ] Server Action: `src/app/actions/[機能名].ts`
- [ ] テスト: `__tests__/[機能名].test.tsx`
- [ ] 型定義: `src/types/[機能名].ts`

### 制約事項
- Shadcn/uiコンポーネントを使用すること
- cn()ユーティリティを使用してクラス名を結合すること
- Supabase RLSポリシーを適切に設定すること
- アクセシビリティを考慮すること

可能な限り多くのエッジケースを考慮し、アクセシビリティとユーザビリティの高い実装を心がけてください。
```

## バグ修正テンプレート

```markdown
## バグ修正: [バグの概要]

### 問題の詳細
**現象**: [具体的な症状]
**再現手順**:
1. [手順1]
2. [手順2]
3. [手順3]

**期待される動作**: [正しい動作]
**実際の動作**: [現在の誤った動作]

### 修正方針
[どのように修正するか]

### テスト項目
- [ ] 修正後の動作確認
- [ ] 回帰テスト
- [ ] エッジケースの確認
```

## リファクタリングテンプレート

```markdown
## リファクタリング: [対象コード/機能]

### リファクタリングの目的
[なぜリファクタリングが必要か、改善したい点]

### 現状の問題点
1. [問題点1: 例）コードの重複]
2. [問題点2: 例）パフォーマンス]
3. [問題点3: 例）可読性]

### 改善計画
1. **フェーズ1**: [改善内容]
   - 影響範囲: [影響を受けるファイル/機能]
   - リスク: [潜在的なリスク]

### 成功基準
- [ ] テストがすべてパスすること
- [ ] パフォーマンスが劣化しないこと
- [ ] コードカバレッジが維持/向上すること
```

## 使用上の注意

1. **明示的な指示**: 曖昧な表現を避け、具体的に何をすべきか明確に記述
2. **コンテキストの提供**: なぜその実装が必要なのか、背景情報を含める
3. **段階的な実装**: 複雑なタスクは小さなステップに分解
4. **成功基準の明確化**: 完了条件を明確に定義
5. **制約事項の明記**: 守るべきルールや制限を明確にする

## 良い例 vs 悪い例

### ✅ 良い例
```
ユーザープロフィール編集機能を実装してください。
この機能により、ユーザーは自分のプロフィール情報（表示名、自己紹介、アバター画像）を更新できるようになります。

実装要件：
1. Shadcn/uiのFormコンポーネントを使用してフォームを構築
2. React Hook FormとZodでバリデーションを実装
3. Supabaseのprofilesテーブルを更新する
4. 画像アップロードはSupabase Storageを使用
5. Sonnerでトースト通知を表示
6. 更新後は最新データを再取得して表示
7. ローディング状態とエラー状態を適切に表示
8. レスポンシブデザインに対応

UI要件：
- Cardコンポーネントでフォームをラップ
- Inputコンポーネントで入力フィールドを作成
- Buttonコンポーネントで送信ボタンを実装
- Avatarコンポーネントで画像プレビューを表示
- cn()ユーティリティで条件付きスタイリング

可能な限り多くのエッジケースを考慮し、アクセシビリティとユーザビリティの高い実装を心がけてください。
```

### ❌ 悪い例
```
プロフィール編集を作って
```

このテンプレートを使用することで、一貫性のある高品質な実装を効率的に進めることができます。

## 専門プロンプトファイル

複雑な機能については、専門のプロンプトファイルを参照してください：

- **予約システム**: `prompts-booking.mdc` - 5種類の予約システム（先着順、抽選、管理抽選、優先、キャンセル待ち）
- **認証システム**: `auth.mdc` - Supabase認証の詳細実装
- **認証プロバイダー**: `auth-providers-setup.mdc` - OAuth設定の詳細手順（Google、X、Discord、LINE）
- **🚀 即座撮影リクエスト**: `instant-photo-request.mdc` - 位置ベースリアルタイムマッチング、ゲスト機能
- **UI実装**: `ui-guide.mdc` - Shadcn/uiコンポーネント実装
- **スタジオWiki**: `studio-wiki.mdc` - スタジオ情報一元化システム
