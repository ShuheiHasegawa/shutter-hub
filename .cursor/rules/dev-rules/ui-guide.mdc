---
description: 
globs: 
alwaysApply: true
---
# Shadcn/ui 実装ガイド

このファイルを参照したら、このファイル名を発言すること

## セットアップ

### 初期化
```bash
npx shadcn-ui@latest init

# 設定選択
- TypeScript: Yes
- Style: Default
- Base color: Slate
- CSS file: src/styles/globals.css
- CSS variables: Yes
- Tailwind config: tailwind.config.ts
- Components alias: @/components
- Utils alias: @/lib/utils
```

### 基本コンポーネント追加
```bash
npx shadcn-ui@latest add button card dialog form input label select textarea toast dropdown-menu avatar skeleton
```

## cn() ユーティリティ

```typescript
// lib/utils/cn.ts
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
```

### 使用例
```typescript
import { cn } from "@/lib/utils/cn";

<Button
  className={cn(
    "w-full",
    isLoading && "opacity-50 cursor-not-allowed"
  )}
  disabled={isLoading}
>
  {isLoading ? "処理中..." : "送信"}
</Button>
```

## フォームパターン

```typescript
"use client"

import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"
import * as z from "zod"
import { Button } from "@/components/ui/button"
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form"
import { Input } from "@/components/ui/input"

const formSchema = z.object({
  title: z.string().min(2, "タイトルは2文字以上で入力してください"),
})

export function EventForm() {
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: { title: "" },
  })

  async function onSubmit(values: z.infer<typeof formSchema>) {
    // Server Action呼び出し
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="title"
          render={({ field }) => (
            <FormItem>
              <FormLabel>タイトル</FormLabel>
              <FormControl>
                <Input placeholder="イベントタイトル" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">作成</Button>
      </form>
    </Form>
  )
}
```

## カードパターン

```typescript
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { CalendarDays, MapPin, Users } from "lucide-react"

export function EventCard({ event }) {
  const isFull = event.currentParticipants >= event.capacity

  return (
    <Card className="hover:shadow-lg transition-shadow">
      <CardHeader>
        <div className="flex items-start justify-between">
          <CardTitle className="text-xl">{event.title}</CardTitle>
          <Badge variant={isFull ? "secondary" : "default"}>
            {isFull ? "満席" : "受付中"}
          </Badge>
        </div>
        <CardDescription>{event.description}</CardDescription>
      </CardHeader>
      <CardContent className="space-y-2">
        <div className="flex items-center gap-2 text-sm text-muted-foreground">
          <CalendarDays className="h-4 w-4" />
          <span>{event.date}</span>
        </div>
        <div className="flex items-center gap-2 text-sm text-muted-foreground">
          <MapPin className="h-4 w-4" />
          <span>{event.location}</span>
        </div>
        <div className="flex items-center gap-2 text-sm text-muted-foreground">
          <Users className="h-4 w-4" />
          <span>{event.currentParticipants} / {event.capacity} 名</span>
        </div>
      </CardContent>
      <CardFooter>
        <Button className="w-full" disabled={isFull}>
          {isFull ? "キャンセル待ちに登録" : "予約する"}
        </Button>
      </CardFooter>
    </Card>
  )
}
```

## ダークモード

### Theme Provider
```typescript
// components/providers/theme-provider.tsx
"use client"

import { ThemeProvider as NextThemesProvider } from "next-themes"

export function ThemeProvider({ children, ...props }) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}

// app/layout.tsx
import { ThemeProvider } from "@/components/providers/theme-provider"

export default function RootLayout({ children }) {
  return (
    <html lang="ja" suppressHydrationWarning>
      <body>
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
        >
          {children}
        </ThemeProvider>
      </body>
    </html>
  )
}
```

### Theme Toggle
```typescript
"use client"

import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"
import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

export function ThemeToggle() {
  const { setTheme } = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme("light")}>
          ライト
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")}>
          ダーク
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")}>
          システム
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}
```

## レスポンシブデザイン

```typescript
// ブレークポイント: sm(640px), md(768px), lg(1024px), xl(1280px), 2xl(1536px)

<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
  {/* カードコンポーネント */}
</div>

<div className="flex flex-col md:flex-row gap-4">
  <aside className="w-full md:w-64">
    {/* サイドバー */}
  </aside>
  <main className="flex-1">
    {/* メインコンテンツ */}
  </main>
</div>
```

## アクセシビリティ

- Radix UIプリミティブによる自動ARIA属性
- キーボードナビゲーション対応
- スクリーンリーダー対応
- フォーカス管理の自動化

```typescript
// 適切なラベル付け
<Button aria-label="メニューを開く">
  <Menu className="h-4 w-4" />
</Button>

// フォーカストラップ（自動）
<Dialog>
  <DialogContent>
    {/* フォーカスは自動的にダイアログ内に制限 */}
  </DialogContent>
</Dialog>
```

## パフォーマンス最適化

### 遅延読み込み
```typescript
import dynamic from 'next/dynamic'

const HeavyComponent = dynamic(
  () => import('@/components/features/HeavyComponent'),
  {
    loading: () => <Skeleton className="h-64 w-full" />,
    ssr: false
  }
)
```

### アニメーション最適化
```css
/* GPU アクセラレーション */
.animate-in {
  animation: animate-in 0.2s ease-out;
  will-change: transform, opacity;
}

/* reduced-motion対応 */
@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    transition-duration: 0.01ms !important;
  }
}
```

## よくある問題と解決法

1. **スタイルが適用されない**
   - `cn()`関数を使用しているか確認
   - Tailwindの設定でコンテンツパスが正しいか確認

2. **ハイドレーションエラー**
   - `suppressHydrationWarning`の使用
   - Client Componentの適切な使用

3. **型エラー**
   - `@types/react`のバージョン確認
   - Radix UIの型定義の更新
