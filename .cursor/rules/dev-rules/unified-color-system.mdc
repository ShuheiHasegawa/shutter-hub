---
alwaysApply: true
---

# ShutterHub 統合カラーシステム実装ガイド

> **統合完了**: 3つのカラーシステムドキュメントを統合した完全ガイド

## 📚 **概要**

このガイドは、ShutterHub の**統合カラーシステム**の完全な実装方法を説明します。ブランド色（固定）とテーマ色（動的切り替え）を適切に使い分け、一貫性のあるデザインシステムを提供します。

### **統合されたシステム構成**

- **🎨 ブランド色**: `brand-*` - ShutterHubの固定ブランドカラー（テーマ不変）
- **🔄 サーフェース色**: `surface-*` - テーマ対応の背景+テキスト自動ペア
- **⚙️ 統合Button**: テーマ対応とShadcn/ui標準の両方をサポート

## 🎨 **統合カラーシステム**

### **1. ブランド色（固定・テーマ不変）**

```css
/* ShutterHub公式ブランドカラー */
brand-primary     /* #6F5091 - ShutterHubロゴ・メインブランド */
brand-secondary   /* #101820 - セカンダリブランド */
brand-success     /* #4ECDC4 - 成功・完了・空きあり */
brand-warning     /* #FFE66D - 警告・注意・要確認 */
brand-error       /* #FF6B6B - エラー・削除・満席 */
brand-info        /* #4D96FF - 情報・リンク・詳細 */
```

### **2. 利用可能なテーマ（サーフェース色）**

```typescript
// 現在実装済みのテーマパレット
const themes = [
  'default', // デフォルト（Shadcn/ui準拠）
  'Pink', // ピンク系グラデーション
  'Purple', // パープル系グラデーション
  'Blue', // ブルー系グラデーション
  'BluePink', // ネイビー×ピンク組み合わせ
];
```

### **3. シンプルなサーフェース構成**

```css
/* セマンティックサーフェース（背景+テキスト自動ペア） */
surface-primary    /* メインボタン・重要なカード・ヘッダー背景 */
surface-accent     /* アクションボタン・強調要素・通知 */
surface-neutral    /* サブボタン・カード背景・フッター */
```

## 🔧 **統合Buttonコンポーネント**

### **新しいButtonバリアント**

```tsx
// 🎨 テーマ対応バリアント（推奨）
<Button variant="default">テーマのプライマリ色</Button>
<Button variant="primary">テーマのプライマリ色</Button>
<Button variant="accent">テーマのアクセント色</Button>
<Button variant="neutral">テーマのニュートラル色</Button>

// 🔧 Shadcn/ui標準バリアント（既存維持）
<Button variant="destructive">削除ボタン</Button>
<Button variant="outline">アウトライン</Button>
<Button variant="secondary">セカンダリ</Button>
<Button variant="ghost">ゴースト</Button>

// 🎨 ブランド色バリアント（固定色・機能別）
<Button variant="brand-success">成功ボタン</Button>
<Button variant="brand-warning">警告ボタン</Button>
<Button variant="brand-error">エラーボタン</Button>
<Button variant="brand-info">情報ボタン</Button>
```

### **使い分けガイドライン**

| 用途                 | 推奨バリアント            | 理由                   |
| -------------------- | ------------------------- | ---------------------- |
| **メインアクション** | `variant="primary"`       | テーマに応じた最適な色 |
| **サブアクション**   | `variant="neutral"`       | 控えめでテーマ対応     |
| **強調アクション**   | `variant="accent"`        | 強調効果+テーマ対応    |
| **削除・危険**       | `variant="destructive"`   | 固定色で意味を明確化   |
| **成功メッセージ**   | `variant="brand-success"` | 固定色で一貫性         |
| **エラーメッセージ** | `variant="brand-error"`   | 固定色で意味明確       |

## 🎯 **実装方法**

### **Level 1: 基本開発者向け（90%のケース）**

#### **カラーパレット追加**

```typescript
// src/lib/utils/color-system-v2.ts に追加するだけ
export const colorPalettes: ColorPalette[] = [
  // ... 既存のテーマ
  {
    name: 'MyCustomTheme',
    colors: {
      primary: '#YOUR_PRIMARY',
      accent: '#YOUR_ACCENT',
      neutral: '#YOUR_NEUTRAL',
    },
  },
];
```

#### **基本的なボタン使用**

```tsx
// シンプルで直感的
<Button variant="primary">予約する</Button>
<Button variant="accent">詳細を見る</Button>
<Button variant="neutral">戻る</Button>
<Button variant="destructive">削除</Button>
```

#### **ブランド色の使用**

```tsx
// 固定色（テーマに影響されない）
<span className="brand-primary">ShutterHub</span>
<span className="brand-success">予約完了</span>
<span className="brand-warning">注意事項</span>
<span className="brand-error">エラー発生</span>
```

### **Level 2: UI実装開発者（9%のケース）**

#### **サーフェース色の使用**

```tsx
// 背景+テキスト色の自動ペア
<div className="surface-primary p-6 rounded-lg">
  <h3>重要なお知らせ</h3>
  <p className="opacity-80">詳細情報</p>
</div>

<div className="surface-neutral p-4 rounded">
  <h4>サブ情報</h4>
</div>
```

#### **カードコンポーネント例**

```tsx
function PhotoSessionCard() {
  return (
    <div className="surface-neutral p-6 rounded-lg transition-colors">
      <h3 className="font-semibold mb-2">撮影会タイトル</h3>
      <p className="opacity-70 mb-4">詳細情報</p>

      <div className="flex gap-2">
        <Button variant="primary">予約する</Button>
        <span className="brand-success text-sm">空きあり</span>
      </div>
    </div>
  );
}
```

### **Level 3: 高度なカスタマイズ（1%のケース）**

#### **CSS Variables直接使用**

```tsx
// 複雑なレイアウト・グラデーション
<div className="bg-gradient-to-r from-surface-primary to-surface-accent p-8">
  <div
    style={{
      backgroundColor: 'hsl(var(--surface-primary) / 0.2)',
      borderColor: 'hsl(var(--brand-primary))',
    }}
  >
    高度なカスタマイズ
  </div>
</div>
```

## 🔧 **実装アーキテクチャ**

### **1. コアシステム (`src/lib/utils/color-system-v2.ts`)**

```typescript
// シンプルなテーマ適用
import { applyThemeV2 } from '@/lib/utils/color-system-v2';

// ライトモードでdefaultテーマを適用
applyThemeV2('default', false);

// ダークモードでPinkテーマを適用
applyThemeV2('Pink', true);
```

### **2. React Hook (`src/hooks/useThemeV2.ts`)**

```typescript
import { useThemeV2 } from '@/hooks/useThemeV2';

function MyComponent() {
  const {
    currentPalette,     // 現在のテーマ名
    isDark,             // ダークモード状態
    toggleDarkMode,     // ダークモード切り替え
    setPalette          // テーマ変更
  } = useThemeV2();

  return (
    <div>
      <Button
        variant={currentPalette === 'Pink' ? 'accent' : 'primary'}
        onClick={toggleDarkMode}
      >
        {isDark ? 'Light' : 'Dark'}モード
      </Button>

      <Button
        variant="neutral"
        onClick={() => setPalette('Purple')}
      >
        Purpleテーマに変更
      </Button>
    </div>
  );
}
```

## 📊 **実装例: Before/After**

### **❌ Before（分散・複雑）**

```tsx
// 3つの異なるシステムが混在
<div className="bg-purple-600 text-white">
  <h1 className="text-shutter-primary">ShutterHub</h1>
  <button className="surface-accent px-4 py-2">ボタン</button>
  <SurfaceButton variant="primary">別のボタン</SurfaceButton>
</div>
```

### **✅ After（統合・シンプル）**

```tsx
// 1つの統合システム
<div className="surface-primary p-6 rounded-lg">
  <h1 className="brand-primary text-2xl font-bold">ShutterHub</h1>
  <p className="opacity-80 mb-4">説明文</p>

  <div className="flex gap-2">
    <Button variant="accent">予約する</Button>
    <Button variant="neutral">詳細</Button>
    <span className="brand-success text-sm">空きあり</span>
  </div>
</div>
```

## 🎯 **ベストプラクティス**

### **DO（推奨）**

```tsx
✅ ブランド要素は固定色
<span className="brand-primary">ShutterHub</span>
<span className="brand-success">成功メッセージ</span>

✅ UI要素はテーマ対応
<Button variant="primary">メインボタン</Button>
<div className="surface-neutral">カード背景</div>

✅ 適切な使い分け
<Button variant="destructive">削除</Button>  // 固定色（危険性を明確に）
<Button variant="accent">予約する</Button>   // テーマ色（ユーザー好み）

✅ 段階的な移行
// 既存コード（そのまま動作）
<Button variant="outline">キャンセル</Button>
// 新規実装（テーマ対応）
<Button variant="primary">確認</Button>
```

### **DON'T（非推奨）**

```tsx
❌ 混在した命名
<Button className="surface-primary">  // surface-*クラス直接使用
<SurfaceButton variant="primary">     // 専用コンポーネント

❌ 固定色とテーマ色の混乱
<div className="bg-purple-600 surface-accent">  // 固定色+テーマ色

❌ 意味のない色選択
<Button variant="accent">削除</Button>  // 削除にアクセント色は不適切
<span className="surface-primary">エラー</span>  // エラーにテーマ色は不適切
```

## 🚀 **開発効率化**

### **自動判定システム**

```tsx
// 将来的な理想形（現在は手動選択）
<Button intent="book">予約する</Button>      // 自動でvariant="primary"
<Button intent="delete">削除</Button>        // 自動でvariant="destructive"
<Button intent="info">詳細</Button>          // 自動でvariant="neutral"
```

### **開発ツール**

```yaml
推奨ツール:
  VSCode拡張:
    - Tailwind CSS IntelliSense
    - Color Highlight
    - Auto Rename Tag

  品質保証:
    - ESLint: 非推奨カラークラス検出
    - Prettier: 一貫したフォーマット
    - Storybook: 全バリアント一覧表示
```

## 🔄 **マイグレーション手順**

### **段階的移行戦略**

#### **Phase 1: 新規実装（即座開始）**

```tsx
// ✅ 新規コンポーネントは統合システム使用
<Button variant="primary">新機能ボタン</Button>
<div className="surface-neutral">新しいカード</div>
<span className="brand-success">新しいメッセージ</span>
```

#### **Phase 2: 重要コンポーネント移行（1-2週間）**

```bash
# 優先度の高いコンポーネントから順次更新
src/components/photo-sessions/
src/components/instant/
src/components/layout/
```

#### **Phase 3: 全体最適化（3-4週間）**

```bash
# 全ファイルの一括更新
grep -r "bg-purple\|text-shutter-" src/components/ |
  # 手動確認後に統合システムに移行
```

### **移行チェックリスト**

```yaml
各コンポーネント移行時:
  - [ ] brand-*でブランド色を使用
  - [ ] Button variantでテーマ対応
  - [ ] surface-*でカード背景
  - [ ] 既存機能の動作確認
  - [ ] ダークモード動作確認
  - [ ] 全テーマでの表示確認
```

## 🛠️ **開発者向けクイックリファレンス**

### **よく使うパターン**

```tsx
// 🎯 メインアクションボタン
<Button variant="primary">保存</Button>
<Button variant="primary">予約する</Button>
<Button variant="primary">送信</Button>

// 🎯 サブアクション
<Button variant="neutral">戻る</Button>
<Button variant="neutral">キャンセル</Button>
<Button variant="outline">詳細</Button>

// 🎯 強調アクション
<Button variant="accent">今すぐ予約</Button>
<Button variant="accent">おすすめ</Button>

// 🎯 危険なアクション
<Button variant="destructive">削除</Button>
<Button variant="destructive">アカウント削除</Button>

// 🎯 機能別メッセージ
<span className="brand-success">予約完了</span>
<span className="brand-warning">要注意</span>
<span className="brand-error">エラー発生</span>
<span className="brand-info">詳細情報</span>

// 🎯 ブランド要素
<span className="brand-primary text-2xl font-bold">ShutterHub</span>
<span className="brand-secondary">サブタイトル</span>
```

### **カード・レイアウト**

```tsx
// 🎯 基本カード
<div className="surface-neutral p-6 rounded-lg">
  <h3>カードタイトル</h3>
  <p className="opacity-80">説明文</p>
  <Button variant="primary">アクション</Button>
</div>

// 🎯 重要なカード
<div className="surface-primary p-6 rounded-lg">
  <h3>重要なお知らせ</h3>
  <Button variant="accent">詳細を見る</Button>
</div>

// 🎯 セクション背景
<section className="py-16 surface-accent">
  <div className="container">
    <h2 className="text-3xl font-bold text-center">セクションタイトル</h2>
  </div>
</section>
```

## 📈 **パフォーマンス・保守性**

### **CSS Variables活用**

```css
/* 効率的な色管理 */
:root {
  /* ブランド色（固定） */
  --brand-primary: 255 35% 40%;
  --brand-success: 174 71% 56%;

  /* サーフェース色（動的） */
  --surface-primary: 222.2 47.4% 11.2%;
  --surface-accent: 231 48% 48%;
}

/* 自動適用 */
.surface-primary {
  background-color: hsl(var(--surface-primary));
  color: hsl(var(--surface-primary-text));
}
```

### **バンドルサイズ最適化**

```yaml
最適化戦略:
  Tree Shaking:
    - 未使用バリアントの自動除去
    - CSS Variables効率化
    - 重複クラス削除

  開発時:
    - PurgeCSS設定最適化
    - 動的クラス名の適切な設定
    - ビルド時間短縮
```

## 🎨 **テーマ切り替えシステム**

### **自動背景色選択**

```typescript
// テーマの最も暗い色を背景に使用（ダークモード）
// テーマの最も明るい色を背景に使用（ライトモード）
function applyThemeV2(paletteName: string, isDark: boolean) {
  // Shadcn/uiの--backgroundを上書きしてテーマ背景色を適用
  if (isDark) {
    root.style.setProperty('--background', darkestThemeColor);
  } else {
    root.style.setProperty('--background', lightestThemeColor);
  }
}
```

### **コントラスト自動調整**

```typescript
// WCAG AA準拠のコントラスト計算
function getContrastColor(hexColor: string): string {
  const luminance = calculateLuminance(rgb);
  // 30%境界でより確実な視認性
  return luminance > 0.3 ? '#000000' : '#FFFFFF';
}
```

## 🔍 **デバッグ・トラブルシューティング**

### **よくある問題と解決法**

#### **1. ボタンの色が変わらない**

```bash
# 原因: CSS優先度の競合
# 解決: 統合Buttonのvariantを使用
❌ <Button className="surface-primary">
✅ <Button variant="primary">
```

#### **2. ダークモードでテーマが無視される**

```bash
# 原因: --backgroundがShadcn/ui固定色
# 解決: applyThemeV2()が--backgroundを上書き
✅ useThemeV2()フックを使用
```

#### **3. ブランド色が変わってしまう**

```bash
# 原因: テーマ対応色を使用
# 解決: brand-*クラスで固定色を使用
❌ <span className="surface-primary">ShutterHub</span>
✅ <span className="brand-primary">ShutterHub</span>
```

## 📚 **統合ファイル構成**

```
src/
├── lib/utils/
│   ├── color-system.ts       # 旧システム（段階的廃止予定）
│   └── color-system-v2.ts    # 新統合システム
├── hooks/
│   ├── useTheme.ts          # 旧フック（段階的廃止予定）
│   └── useThemeV2.ts        # 新統合フック
├── components/ui/
│   ├── button.tsx           # 統合Buttonコンポーネント
│   └── theme-selector.tsx   # テーマ切り替えUI
├── styles/
│   └── color-system-v2.css  # 統合CSS変数
└── app/
    ├── globals.css          # メインCSS
    └── [locale]/dev/color-theme-v2/  # デモページ
```

## 🎉 **統合システムの利点**

### **開発者体験**

1. **🎯 シンプル**: 1つのButtonコンポーネントですべて対応
2. **🔄 一貫性**: 統一されたAPI・命名規則
3. **📚 学習コスト**: 既存知識をそのまま活用
4. **⚡ 効率性**: 迷いなく適切なバリアントを選択

### **ユーザー体験**

1. **🎨 柔軟性**: 5つのテーマ × ライト/ダークモード
2. **♿ アクセシビリティ**: 自動コントラスト調整
3. **🚀 パフォーマンス**: CSS Variablesによる効率的な色管理
4. **🔄 一貫性**: ブランド色は固定、UI色は好みで変更

### **保守性**

1. **📝 統一ドキュメント**: 1つのガイドですべてをカバー
2. **🔧 単一システム**: 複数システムの管理負荷解消
3. **📈 段階的移行**: 既存システムに影響なく導入
4. **🎯 明確な責任**: ブランド色とテーマ色の明確な分離

---

## 🚀 **今すぐ始める**

### **新規実装**

```tsx
// 今日から使える統合システム
import { Button } from '@/components/ui/button';

function NewFeature() {
  return (
    <div className="surface-neutral p-6 rounded-lg">
      <h2 className="brand-primary text-xl font-bold">新機能</h2>
      <p className="opacity-80 mb-4">機能説明</p>

      <div className="flex gap-2">
        <Button variant="primary">メインアクション</Button>
        <Button variant="neutral">サブアクション</Button>
        <span className="brand-success">ステータス</span>
      </div>
    </div>
  );
}
```

### **デモページでテスト**

`http://localhost:8888/ja/dev/color-theme-v2` で統合システムの動作を確認

**このガイドにより、ShutterHub v2の統合カラーシステムを効率的に活用できます！**
