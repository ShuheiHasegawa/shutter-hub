---
description: 
globs: 
alwaysApply: false
---
# 認証プロバイダー設定ガイド

このファイルを参照したら、このファイル名を発言すること

## 初回リリース対象プロバイダー

### 🔴 最優先（必須）
1. **Google** - 信頼性・普及率
2. **X (Twitter)** - 業界親和性

### 🟡 中優先（推奨）
3. **Discord** - 若年層・コミュニティ
4. **LINE** - 日本市場特化

## 詳細設定手順

### 1. Google OAuth設定

#### Google Cloud Console設定
```bash
1. Google Cloud Console (https://console.cloud.google.com/) にアクセス
2. 新しいプロジェクトを作成 or 既存プロジェクト選択
3. 「APIとサービス」→「認証情報」
4. 「認証情報を作成」→「OAuth 2.0 クライアントID」
5. アプリケーションの種類: ウェブアプリケーション
```

#### リダイレクトURI設定
```
承認済みのリダイレクトURI:
- http://localhost:3000/auth/callback (開発環境)
- https://your-domain.com/auth/callback (本番環境)
- https://your-project.supabase.co/auth/v1/callback (Supabase)
```

#### 環境変数
```env
GOOGLE_CLIENT_ID=your_google_client_id
GOOGLE_CLIENT_SECRET=your_google_client_secret
```

#### Supabase設定
```sql
-- Supabase Dashboard > Authentication > Providers > Google
-- Enable Google provider
-- Client ID: your_google_client_id
-- Client Secret: your_google_client_secret
```

### 2. X (Twitter) OAuth設定

#### Twitter Developer Portal設定
```bash
1. Twitter Developer Portal (https://developer.twitter.com/) にアクセス
2. 新しいアプリを作成
3. App permissions: Read and write
4. Type of App: Web App
5. OAuth 2.0 settings を有効化
```

#### コールバックURL設定
```
Callback URLs:
- http://localhost:3000/auth/callback
- https://your-domain.com/auth/callback
- https://your-project.supabase.co/auth/v1/callback
```

#### 環境変数
```env
TWITTER_CLIENT_ID=your_twitter_client_id
TWITTER_CLIENT_SECRET=your_twitter_client_secret
```

#### Supabase設定
```sql
-- Supabase Dashboard > Authentication > Providers > Twitter
-- Enable Twitter provider
-- Client ID: your_twitter_client_id
-- Client Secret: your_twitter_client_secret
```

### 3. Discord OAuth設定

#### Discord Developer Portal設定
```bash
1. Discord Developer Portal (https://discord.com/developers/applications) にアクセス
2. 「New Application」でアプリ作成
3. 「OAuth2」タブに移動
4. Scopes: identify, email
5. Redirect URIs を設定
```

#### リダイレクトURI設定
```
Redirects:
- http://localhost:3000/auth/callback
- https://your-domain.com/auth/callback
- https://your-project.supabase.co/auth/v1/callback
```

#### 環境変数
```env
DISCORD_CLIENT_ID=your_discord_client_id
DISCORD_CLIENT_SECRET=your_discord_client_secret
```

#### Supabase設定
```sql
-- Supabase Dashboard > Authentication > Providers > Discord
-- Enable Discord provider
-- Client ID: your_discord_client_id
-- Client Secret: your_discord_client_secret
```

### 4. LINE OAuth設定

#### LINE Developers設定
```bash
1. LINE Developers (https://developers.line.biz/) にアクセス
2. 新しいプロバイダー作成
3. 「LINE Login」チャネル作成
4. チャネル基本設定でアプリタイプ設定
5. LINE Login設定でコールバックURL設定
```

#### コールバックURL設定
```
Callback URL:
- http://localhost:3000/auth/callback
- https://your-domain.com/auth/callback
- https://your-project.supabase.co/auth/v1/callback
```

#### 環境変数
```env
LINE_CLIENT_ID=your_line_channel_id
LINE_CLIENT_SECRET=your_line_channel_secret
```

#### Supabase設定
```sql
-- Supabase Dashboard > Authentication > Providers > LINE
-- Enable LINE provider
-- Client ID: your_line_channel_id
-- Client Secret: your_line_channel_secret
```

## 共通実装コード

### OAuth認証コンポーネント
```typescript
// components/auth/OAuthButtons.tsx
"use client";

import { createClient } from "@/lib/supabase/client";
import { Button } from "@/components/ui/button";
import { Icons } from "@/components/ui/icons";

export function OAuthButtons() {
  const supabase = createClient();

  const handleOAuthSignIn = async (provider: 'google' | 'twitter' | 'discord' | 'line') => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider,
      options: {
        redirectTo: `${window.location.origin}/auth/callback`,
        queryParams: {
          access_type: 'offline',
          prompt: 'consent',
        },
      },
    });

    if (error) {
      console.error('OAuth error:', error);
    }
  };

  return (
    <div className="grid grid-cols-2 gap-4">
      <Button
        variant="outline"
        onClick={() => handleOAuthSignIn('google')}
        className="w-full"
      >
        <Icons.google className="mr-2 h-4 w-4" />
        Google
      </Button>
      
      <Button
        variant="outline"
        onClick={() => handleOAuthSignIn('twitter')}
        className="w-full"
      >
        <Icons.twitter className="mr-2 h-4 w-4" />
        X
      </Button>
      
      <Button
        variant="outline"
        onClick={() => handleOAuthSignIn('discord')}
        className="w-full"
      >
        <Icons.discord className="mr-2 h-4 w-4" />
        Discord
      </Button>
      
      <Button
        variant="outline"
        onClick={() => handleOAuthSignIn('line')}
        className="w-full"
      >
        <Icons.line className="mr-2 h-4 w-4" />
        LINE
      </Button>
    </div>
  );
}
```

### コールバックページ
```typescript
// app/auth/callback/page.tsx
import { createClient } from "@/lib/supabase/server";
import { NextRequest } from "next/server";
import { redirect } from "next/navigation";

export default async function AuthCallback({
  searchParams,
}: {
  searchParams: { code: string };
}) {
  const supabase = createClient();

  if (searchParams.code) {
    const { error } = await supabase.auth.exchangeCodeForSession(searchParams.code);
    
    if (error) {
      redirect('/auth/error');
    }
  }

  // 認証成功後のリダイレクト
  redirect('/dashboard');
}
```

### アイコンコンポーネント
```typescript
// components/ui/icons.tsx
export const Icons = {
  google: (props: any) => (
    <svg viewBox="0 0 24 24" {...props}>
      <path
        fill="currentColor"
        d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
      />
      <path
        fill="currentColor"
        d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
      />
      <path
        fill="currentColor"
        d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
      />
      <path
        fill="currentColor"
        d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
      />
    </svg>
  ),
  twitter: (props: any) => (
    <svg viewBox="0 0 24 24" {...props}>
      <path
        fill="currentColor"
        d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"
      />
    </svg>
  ),
  discord: (props: any) => (
    <svg viewBox="0 0 24 24" {...props}>
      <path
        fill="currentColor"
        d="M20.317 4.37a19.791 19.791 0 0 0-4.885-1.515.074.074 0 0 0-.079.037c-.21.375-.444.864-.608 1.25a18.27 18.27 0 0 0-5.487 0 12.64 12.64 0 0 0-.617-1.25.077.077 0 0 0-.079-.037A19.736 19.736 0 0 0 3.677 4.37a.07.07 0 0 0-.032.027C.533 9.046-.32 13.58.099 18.057a.082.082 0 0 0 .031.057 19.9 19.9 0 0 0 5.993 3.03.078.078 0 0 0 .084-.028 14.09 14.09 0 0 0 1.226-1.994.076.076 0 0 0-.041-.106 13.107 13.107 0 0 1-1.872-.892.077.077 0 0 1-.008-.128 10.2 10.2 0 0 0 .372-.292.074.074 0 0 1 .077-.01c3.928 1.793 8.18 1.793 12.062 0a.074.074 0 0 1 .078.01c.12.098.246.198.373.292a.077.077 0 0 1-.006.127 12.299 12.299 0 0 1-1.873.892.077.077 0 0 0-.041.107c.36.698.772 1.362 1.225 1.993a.076.076 0 0 0 .084.028 19.839 19.839 0 0 0 6.002-3.03.077.077 0 0 0 .032-.054c.5-5.177-.838-9.674-3.549-13.66a.061.061 0 0 0-.031-.03zM8.02 15.33c-1.183 0-2.157-1.085-2.157-2.419 0-1.333.956-2.419 2.157-2.419 1.21 0 2.176 1.096 2.157 2.42 0 1.333-.956 2.418-2.157 2.418zm7.975 0c-1.183 0-2.157-1.085-2.157-2.419 0-1.333.955-2.419 2.157-2.419 1.21 0 2.176 1.096 2.157 2.42 0 1.333-.946 2.418-2.157 2.418z"
      />
    </svg>
  ),
  line: (props: any) => (
    <svg viewBox="0 0 24 24" {...props}>
      <path
        fill="currentColor"
        d="M19.365 9.863c.349 0 .63.285.63.631 0 .345-.281.63-.63.63H17.61v1.125h1.755c.349 0 .63.283.63.63 0 .344-.281.629-.63.629h-2.386c-.345 0-.627-.285-.627-.629V8.108c0-.345.282-.63.63-.63h2.386c.346 0 .627.285.627.63 0 .349-.281.63-.63.63H17.61v1.125h1.755zm-3.855 3.016c0 .27-.174.51-.432.596-.064.021-.133.031-.199.031-.211 0-.391-.09-.51-.25l-2.443-3.317v2.94c0 .344-.279.629-.631.629-.346 0-.626-.285-.626-.629V8.108c0-.27.173-.51.43-.595.06-.023.136-.033.194-.033.195 0 .375.104.495.254l2.462 3.33V8.108c0-.345.282-.63.63-.63.345 0 .63.285.63.63v4.771zm-5.741 0c0 .344-.282.629-.631.629-.345 0-.627-.285-.627-.629V8.108c0-.345.282-.63.63-.63.346 0 .628.285.628.63v4.771zm-2.466.629H4.917c-.345 0-.63-.285-.63-.629V8.108c0-.345.285-.63.63-.63.348 0 .63.285.63.63v4.141h1.756c.348 0 .629.283.629.63 0 .344-.282.629-.629.629M24 10.314C24 4.943 18.615.572 12 .572S0 4.943 0 10.314c0 4.811 4.27 8.842 10.035 9.608.391.082.923.258 1.058.59.12.301.079.766.038 1.08l-.164 1.02c-.045.301-.24 1.186 1.049.645 1.291-.539 6.916-4.078 9.436-6.975C23.176 14.393 24 12.458 24 10.314"
      />
    </svg>
  ),
};
```

## 実装チェックリスト

### 🔴 必須（最優先）
- [ ] Google OAuth設定完了
- [ ] X (Twitter) OAuth設定完了
- [ ] 基本的なOAuth認証フロー実装
- [ ] コールバックページ実装

### 🟡 推奨（中優先）
- [ ] Discord OAuth設定完了
- [ ] LINE OAuth設定完了
- [ ] エラーハンドリング実装
- [ ] ローディング状態実装

### 🟢 オプション（低優先）
- [ ] 認証プロバイダー選択の記憶機能
- [ ] アカウント連携機能
- [ ] プロフィール情報の自動取得

## 注意事項

1. **セキュリティ**: 各プロバイダーのクライアントシークレットは環境変数で管理
2. **リダイレクト**: 本番環境のドメインを事前に各プロバイダーに登録
3. **スコープ**: 必要最小限の権限のみ要求
4. **エラー処理**: 認証失敗時の適切なフィードバック
5. **UX**: 認証プロバイダーの選択肢を分かりやすく表示

この設定により、ShutterHub v2のターゲットユーザーの95%以上をカバーできます。
