---
description: 
globs: 
alwaysApply: true
---
# ShutterHub v2 実装計画書

このファイルを参照したら、このファイル名を発言すること

## 🎯 **概要**

ShutterHub v2のリリースまでに必要な全機能を段階的に実装するための詳細計画書。
各タスクには対応するプロンプトを記述し、機能漏れや実装ミスを防止する。

## 📋 **実装フェーズ構成**

### **Phase 0: プロジェクト基盤構築**
- 期間: 1週間
- 目標: 開発環境とプロジェクト基盤の構築

### **Phase 1: MVP（最小限の実装）**
- 期間: 8週間
- 目標: 基本的な撮影会予約システムの完成

### **Phase 2: 拡張機能**
- 期間: 6週間
- 目標: 高度な予約システムと評価機能

### **Phase 3: 差別化機能**
- 期間: 8週間
- 目標: 即座撮影リクエストとStudioWiki

## 🚀 **Phase 0: プロジェクト基盤構築**

### **T0-001: プロジェクト初期設定**
**期間**: 1日  
**優先度**: 🔴 緊急  
**依存関係**: なし

**タスク内容**:
- Next.js 14プロジェクト作成
- TypeScript設定
- ESLint/Prettier設定
- Husky/Commitlint設定

**実行プロンプト**:
```markdown
## タスク: Next.js 14 + TypeScript プロジェクト初期設定

### 背景と目的
ShutterHub v2の開発基盤を構築します。
`system-requirements.mdc`と`techstack.mdc`の要件に従って、最新のベストプラクティスでプロジェクトを初期化してください。

### 技術要件
- Next.js 14 (App Router)
- TypeScript
- TailwindCSS + Shadcn/ui
- ESLint + Prettier
- Husky (pre-commit hooks)
- Commitlint

### 実装手順
1. `npx create-next-app@latest shutter-hub-v2 --typescript --tailwind --eslint --app`
2. Shadcn/ui初期設定
3. 開発ツール設定（ESLint、Prettier、Husky）
4. 基本的なフォルダ構成作成
5. 環境変数設定ファイル作成

### 期待される成果物
- [ ] 基本プロジェクト構成
- [ ] `src/`フォルダ構成
- [ ] 設定ファイル一式
- [ ] README.md更新
- [ ] 初回コミット

### 特別な考慮事項
- `system-requirements.mdc`のNode.js 18.x要件を満たすこと
- 将来の多言語対応を考慮したフォルダ構成
- PWA対応を見据えた設定
```

### **T0-002: Supabase環境構築**
**期間**: 1日  
**優先度**: 🔴 緊急  
**依存関係**: T0-001

**タスク内容**:
- Supabaseプロジェクト作成
- 認証設定
- 基本的なRLS設定
- 環境変数設定

**実行プロンプト**:
```markdown
## タスク: Supabase環境構築とNext.js連携

### 背景と目的
ShutterHub v2のバックエンドとしてSupabaseを設定し、Next.jsプロジェクトと連携させます。
`auth.mdc`と`system-requirements.mdc`の要件に従って設定してください。

### 技術要件
- Supabase認証（Email/Password + OAuth）
- PostgreSQL データベース
- Row Level Security (RLS)
- Supabase Storage

### 実装手順
1. Supabaseプロジェクト作成
2. 認証プロバイダー設定（Google、X、Discord、LINE）
3. 基本的なユーザーテーブル作成
4. RLS ポリシー設定
5. Next.js Supabaseクライアント設定
6. 環境変数設定

### 期待される成果物
- [ ] Supabaseプロジェクト設定完了
- [ ] 認証プロバイダー設定
- [ ] `lib/supabase.ts` クライアント設定
- [ ] 環境変数設定（`.env.local`）
- [ ] 基本的なRLS設定

### 特別な考慮事項
- `auth-providers-setup.mdc`の設定手順に従うこと
- GDPR対応を考慮したデータ設計
- 将来のスケーラビリティを考慮
```

### **T0-003: UI基盤構築**
**期間**: 2日  
**優先度**: 🔴 緊急  
**依存関係**: T0-001

**タスク内容**:
- Shadcn/ui コンポーネント導入
- 基本レイアウト作成
- テーマ設定
- レスポンシブ対応

**実行プロンプト**:
```markdown
## タスク: Shadcn/ui基盤構築とレスポンシブレイアウト

### 背景と目的
ShutterHub v2のUI基盤を構築します。
`ui-guide.mdc`と`system-requirements.mdc`の要件に従って、一貫性のあるデザインシステムを構築してください。

### 技術要件
- Shadcn/ui コンポーネント
- TailwindCSS レスポンシブ対応
- ダークモード対応
- PWA対応のレイアウト

### 実装手順
1. Shadcn/ui 初期設定とコンポーネント導入
2. 基本レイアウトコンポーネント作成
3. ナビゲーション（ヘッダー・フッター・サイドバー）
4. PWA対応のボトムナビゲーション
5. テーマ設定（ライト・ダークモード）
6. レスポンシブブレイクポイント設定

### 期待される成果物
- [ ] `components/ui/` 基本コンポーネント
- [ ] `components/layout/` レイアウトコンポーネント
- [ ] `app/layout.tsx` ルートレイアウト
- [ ] テーマプロバイダー設定
- [ ] レスポンシブ対応確認

### 特別な考慮事項
- `system-requirements.mdc`のブレイクポイント要件
- PWA対応のボトムナビゲーション
- アクセシビリティ対応（ARIA属性）
```

### **T0-004: 多言語対応基盤**
**期間**: 1日  
**優先度**: 🟡 重要  
**依存関係**: T0-001

**タスク内容**:
- next-intl設定
- 言語切り替え機能
- 基本的な翻訳ファイル作成

**実行プロンプト**:
```markdown
## タスク: 多言語対応基盤構築（日本語・英語）

### 背景と目的
ShutterHub v2の国際化対応を実装します。
`system-requirements.mdc`の多言語要件に従って、日本語・英語対応を構築してください。

### 技術要件
- next-intl
- 日本語・英語対応
- タイムゾーン対応
- 地域別フォーマット

### 実装手順
1. next-intl インストールと設定
2. 言語ファイル構成作成
3. 基本的な翻訳ファイル作成
4. 言語切り替えコンポーネント
5. タイムゾーン対応設定
6. 地域別フォーマット設定

### 期待される成果物
- [ ] `messages/` 翻訳ファイル
- [ ] `middleware.ts` 言語ルーティング
- [ ] 言語切り替えコンポーネント
- [ ] タイムゾーン対応ユーティリティ
- [ ] 基本的なUI翻訳

### 特別な考慮事項
- `system-requirements.mdc`の地域対応要件
- 将来の言語追加を考慮した設計
- SEO対応（hreflang）
```

## 🏗️ **Phase 1: MVP（最小限の実装）**

### **T1-001: 認証システム実装**
**期間**: 3日  
**優先度**: 🔴 緊急  
**依存関係**: T0-002

**タスク内容**:
- ログイン・サインアップ機能
- OAuth認証（Google、X）
- プロフィール管理
- セッション管理

**実行プロンプト**:
```markdown
## タスク: Supabase認証システム実装

### 背景と目的
ShutterHub v2の認証システムを実装します。
`auth.mdc`と`auth-providers-setup.mdc`の要件に従って、セキュアで使いやすい認証システムを構築してください。

### 技術要件
- Supabase Auth
- OAuth認証（Google、X、Discord、LINE）
- メール認証
- セッション管理

### 実装手順
1. 認証コンポーネント作成（ログイン・サインアップ）
2. OAuth認証フロー実装
3. プロフィール管理画面
4. 認証状態管理（Context/Zustand）
5. 認証ガード実装
6. パスワードリセット機能

### 期待される成果物
- [ ] `components/auth/` 認証コンポーネント
- [ ] `hooks/useAuth.ts` 認証フック
- [ ] `middleware.ts` 認証ガード
- [ ] プロフィール管理画面
- [ ] OAuth認証フロー

### 特別な考慮事項
- `system-requirements.mdc`のセキュリティ要件
- GDPR対応のデータ処理同意
- パスワードポリシー実装
```

### **T1-002: ユーザープロフィール機能**
**期間**: 3日  
**優先度**: 🔴 緊急  
**依存関係**: T1-001

**タスク内容**:
- プロフィール作成・編集
- ユーザータイプ選択（モデル/カメラマン/運営者）
- プロフィール画像アップロード
- 基本情報管理

**実行プロンプト**:
```markdown
## タスク: ユーザープロフィール機能実装

### 背景と目的
ShutterHub v2のユーザープロフィール機能を実装します。
モデル、カメラマン、運営者の三者に対応したプロフィール管理システムを構築してください。

### 技術要件
- Supabase Storage（画像アップロード）
- フォームバリデーション
- 画像最適化
- ユーザータイプ別フィールド

### 実装手順
1. プロフィールデータベース設計
2. プロフィール作成・編集フォーム
3. 画像アップロード機能
4. ユーザータイプ別フィールド管理
5. プロフィール表示ページ
6. バリデーション実装

### 期待される成果物
- [ ] プロフィールテーブル設計
- [ ] `components/profile/` プロフィールコンポーネント
- [ ] 画像アップロード機能
- [ ] プロフィール編集フォーム
- [ ] ユーザータイプ管理

### 特別な考慮事項
- `system-requirements.mdc`の画像容量制限
- 三者（モデル・カメラマン・運営者）対応
- プライバシー設定
```

### **T1-003: 撮影会管理機能**
**期間**: 4日  
**優先度**: 🔴 緊急  
**依存関係**: T1-002

**タスク内容**:
- 撮影会作成・編集・削除
- 日時・場所・料金設定
- 公開/非公開設定
- 撮影会詳細ページ

**実行プロンプト**:
```markdown
## タスク: 撮影会管理機能実装

### 背景と目的
ShutterHub v2の撮影会管理機能を実装します。
運営者が撮影会を作成・管理し、参加者が詳細を確認できるシステムを構築してください。

### 技術要件
- 撮影会CRUD操作
- 日時管理（タイムゾーン対応）
- 地図連携
- 画像アップロード

### 実装手順
1. 撮影会データベース設計
2. 撮影会作成・編集フォーム
3. 撮影会一覧・詳細ページ
4. 日時管理（タイムゾーン対応）
5. 場所設定（地図連携）
6. 画像ギャラリー機能

### 期待される成果物
- [ ] 撮影会テーブル設計
- [ ] `components/photo-sessions/` コンポーネント
- [ ] 撮影会作成・編集フォーム
- [ ] 撮影会詳細ページ
- [ ] 地図連携機能

### 特別な考慮事項
- タイムゾーン対応
- 多言語対応（日英）
- 画像最適化
- SEO対応
```

### **T1-004: 基本予約システム（先着順）**
**期間**: 5日  
**優先度**: 🔴 緊急  
**依存関係**: T1-003

**タスク内容**:
- 先着順予約機能
- 予約確認・キャンセル
- 予約一覧表示
- 在庫管理

**実行プロンプト**:
```markdown
## タスク: 先着順予約システム実装

### 背景と目的
ShutterHub v2の基本予約システムを実装します。
`prompts-booking.mdc`の先着順予約プロンプトに従って、リアルタイムな在庫管理を含む予約システムを構築してください。

### 技術要件
- リアルタイム在庫管理
- 楽観的ロック
- Server Actions
- Supabase Realtime

### 実装手順
1. 予約テーブル設計
2. 予約フォーム実装
3. リアルタイム在庫表示
4. 予約確認・キャンセル機能
5. 予約一覧ページ
6. 競合状態処理

### 期待される成果物
- [ ] 予約テーブル設計
- [ ] `components/booking/` 予約コンポーネント
- [ ] Server Actions実装
- [ ] リアルタイム在庫管理
- [ ] 予約一覧・詳細ページ

### 特別な考慮事項
- `prompts-booking.mdc`の先着順予約要件
- 同時予約の競合処理
- リアルタイム更新
- エラーハンドリング
```

### **T1-005: 基本検索機能**
**期間**: 3日  
**優先度**: 🟡 重要  
**依存関係**: T1-003

**タスク内容**:
- 日付による検索
- エリアによる検索
- キーワード検索
- フィルタリング機能

**実行プロンプト**:
```markdown
## タスク: 撮影会検索・フィルタリング機能実装

### 背景と目的
ShutterHub v2の撮影会検索機能を実装します。
ユーザーが効率的に希望の撮影会を見つけられる検索・フィルタリングシステムを構築してください。

### 技術要件
- PostgreSQL全文検索
- 地理的検索
- 日付範囲検索
- 動的フィルタリング

### 実装手順
1. 検索インデックス設計
2. 検索フォーム実装
3. フィルタリング機能
4. 検索結果表示
5. ソート機能
6. ページネーション

### 期待される成果物
- [ ] 検索インデックス設定
- [ ] `components/search/` 検索コンポーネント
- [ ] フィルタリング機能
- [ ] 検索結果ページ
- [ ] ソート・ページネーション

### 特別な考慮事項
- パフォーマンス最適化
- 多言語検索対応
- 地理的検索精度
- UX最適化
```

### **T1-006: 基本メール通知**
**期間**: 2日  
**優先度**: 🟡 重要  
**依存関係**: T1-004

**タスク内容**:
- 予約確認メール
- キャンセル通知
- リマインダーメール
- メールテンプレート

**実行プロンプト**:
```markdown
## タスク: 基本メール通知システム実装

### 背景と目的
ShutterHub v2の基本メール通知機能を実装します。
`system-requirements.mdc`の通知要件に従って、Resendを使用したメール通知システムを構築してください。

### 技術要件
- Resend メール送信
- HTMLメールテンプレート
- 多言語対応
- 送信履歴管理

### 実装手順
1. Resend設定
2. メールテンプレート作成
3. 送信機能実装
4. 多言語対応
5. 送信履歴管理
6. エラーハンドリング

### 期待される成果物
- [ ] Resend設定
- [ ] `lib/email.ts` メール送信ライブラリ
- [ ] HTMLメールテンプレート
- [ ] 多言語メール対応
- [ ] 送信履歴管理

### 特別な考慮事項
- `system-requirements.mdc`の送信頻度制限
- GDPR対応（配信停止）
- 多言語テンプレート
- 送信エラー処理
```

### **T1-007: 基本分析設定**
**期間**: 1日  
**優先度**: 🟢 通常  
**依存関係**: T1-001

**タスク内容**:
- Google Analytics設定
- 基本イベント追跡
- コンバージョン設定
- プライバシー対応

**実行プロンプト**:
```markdown
## タスク: Google Analytics基本設定

### 背景と目的
ShutterHub v2の分析基盤を構築します。
`system-requirements.mdc`の分析要件に従って、GDPR対応のGoogle Analytics設定を実装してください。

### 技術要件
- Google Analytics 4
- Google Tag Manager
- カスタムイベント
- プライバシー対応

### 実装手順
1. Google Analytics 4設定
2. Google Tag Manager設定
3. カスタムイベント実装
4. コンバージョン設定
5. プライバシー設定
6. Cookie同意管理

### 期待される成果物
- [ ] GA4設定
- [ ] GTM設定
- [ ] カスタムイベント実装
- [ ] Cookie同意バナー
- [ ] プライバシー設定

### 特別な考慮事項
- GDPR対応
- Cookie同意管理
- データ保持期間設定
- プライバシーポリシー連携
```

## 🔧 **Phase 2: 拡張機能**

### **T2-001: 高度な予約システム（抽選）**
**期間**: 4日  
**優先度**: 🔴 緊急  
**依存関係**: T1-004

**タスク内容**:
- 抽選予約機能
- 応募期間管理
- 抽選処理
- 結果通知

**実行プロンプト**:
```markdown
## タスク: 抽選予約システム実装

### 背景と目的
ShutterHub v2の抽選予約システムを実装します。
`prompts-booking.mdc`の抽選予約プロンプトに従って、公平で透明性の高い抽選システムを構築してください。

### 技術要件
- Supabase Edge Functions
- cron job
- 抽選アルゴリズム
- メール通知連携

### 実装手順
1. 抽選撮影会テーブル設計
2. 応募フォーム実装
3. 抽選処理Edge Function
4. 結果通知システム
5. 抽選履歴管理
6. 管理画面実装

### 期待される成果物
- [ ] 抽選テーブル設計
- [ ] 抽選応募フォーム
- [ ] Edge Function抽選処理
- [ ] 結果通知システム
- [ ] 抽選管理画面

### 特別な考慮事項
- 抽選の公平性確保
- 透明性の担保
- スケーラビリティ
- 監査ログ
```

### **T2-002: 優先予約システム**
**期間**: 4日  
**優先度**: 🟡 重要  
**依存関係**: T2-001

**タスク内容**:
- ユーザーランク管理
- 段階的予約開始
- 優先枠管理
- ランクアップシステム

**実行プロンプト**:
```markdown
## タスク: 優先予約システム実装

### 背景と目的
ShutterHub v2の優先予約システムを実装します。
`prompts-booking.mdc`の優先予約プロンプトに従って、ユーザーランクに基づく段階的予約システムを構築してください。

### 技術要件
- ユーザーランク計算
- 時間ベースアクセス制御
- 動的予約開始時間
- ポイントシステム

### 実装手順
1. ランクシステム設計
2. ポイント計算ロジック
3. 段階的予約開始機能
4. 優先枠管理
5. ランク表示UI
6. 通知システム連携

### 期待される成果物
- [ ] ランクテーブル設計
- [ ] ポイント計算システム
- [ ] 優先予約フォーム
- [ ] ランク表示コンポーネント
- [ ] 優先予約管理画面

### 特別な考慮事項
- 公平なランク計算
- 透明性の確保
- ユーザーモチベーション
- 不正防止
```

### **T2-003: キャンセル待ちシステム**
**期間**: 3日  
**優先度**: 🟡 重要  
**依存関係**: T1-004

**タスク内容**:
- 待機列管理
- 自動繰り上げ
- 期限付き確認
- 待機状況表示

**実行プロンプト**:
```markdown
## タスク: キャンセル待ちシステム実装

### 背景と目的
ShutterHub v2のキャンセル待ちシステムを実装します。
`prompts-booking.mdc`のキャンセル待ちプロンプトに従って、公平で効率的な待機列システムを構築してください。

### 技術要件
- キューシステム
- リアルタイム通知
- 自動タイムアウト
- 動的順位更新

### 実装手順
1. 待機列テーブル設計
2. 待機列登録機能
3. 自動繰り上げ処理
4. 応答期限管理
5. 待機状況表示
6. 通知システム連携

### 期待される成果物
- [ ] 待機列テーブル設計
- [ ] 待機列登録フォーム
- [ ] 自動繰り上げ処理
- [ ] 待機状況表示
- [ ] 通知システム

### 特別な考慮事項
- 厳密な先着順維持
- 迅速な繰り上げ通知
- 信頼性の確保
- ユーザビリティ
```

### **T2-004: 評価・レビューシステム**
**期間**: 4日  
**優先度**: 🟡 重要  
**依存関係**: T1-004

**タスク内容**:
- 5段階評価
- テキストレビュー
- 相互評価
- 評価集計・表示

**実行プロンプト**:
```markdown
## タスク: 評価・レビューシステム実装

### 背景と目的
ShutterHub v2の評価・レビューシステムを実装します。
モデル、カメラマン、運営者の相互評価により、信頼性の高いプラットフォームを構築してください。

### 技術要件
- 相互評価システム
- 評価集計
- レビュー管理
- 不正防止

### 実装手順
1. 評価テーブル設計
2. 評価フォーム実装
3. 評価集計システム
4. レビュー表示機能
5. 評価統計表示
6. 不正評価防止

### 期待される成果物
- [ ] 評価テーブル設計
- [ ] 評価フォーム
- [ ] 評価集計システム
- [ ] レビュー表示ページ
- [ ] 評価統計機能

### 特別な考慮事項
- 相互評価の公平性
- 不正評価防止
- プライバシー保護
- 評価の信頼性
```

### **T2-005: メッセージング機能**
**期間**: 4日  
**優先度**: 🟡 重要  
**依存関係**: T1-002

**タスク内容**:
- ダイレクトメッセージ
- グループメッセージ
- ファイル共有
- 通知連携

**実行プロンプト**:
```markdown
## タスク: メッセージング機能実装

### 背景と目的
ShutterHub v2のメッセージング機能を実装します。
撮影会参加者間のスムーズなコミュニケーションを支援するシステムを構築してください。

### 技術要件
- リアルタイムメッセージング
- ファイル共有
- 既読管理
- 通知連携

### 実装手順
1. メッセージテーブル設計
2. リアルタイムメッセージング
3. ファイル共有機能
4. 既読・未読管理
5. メッセージ履歴
6. 通知システム連携

### 期待される成果物
- [ ] メッセージテーブル設計
- [ ] メッセージコンポーネント
- [ ] リアルタイム機能
- [ ] ファイル共有機能
- [ ] 通知連携

### 特別な考慮事項
- リアルタイム性能
- ファイル容量制限
- プライバシー保護
- スパム防止
```

### **T2-006: 決済機能（Stripe）**
**期間**: 5日  
**優先度**: 🔴 緊急  
**依存関係**: T1-004

**タスク内容**:
- Stripe連携
- 決済処理
- 返金処理
- 売上管理

**実行プロンプト**:
```markdown
## タスク: Stripe決済システム実装

### 背景と目的
ShutterHub v2の決済システムを実装します。
`system-requirements.mdc`の決済要件に従って、セキュアで使いやすい決済システムを構築してください。

### 技術要件
- Stripe Payment Intent
- Webhook処理
- 返金機能
- 多通貨対応

### 実装手順
1. Stripe設定
2. 決済フォーム実装
3. Webhook処理
4. 返金機能
5. 売上管理画面
6. 多通貨対応

### 期待される成果物
- [ ] Stripe設定
- [ ] 決済フォーム
- [ ] Webhook処理
- [ ] 返金機能
- [ ] 売上管理画面

### 特別な考慮事項
- PCI DSS準拠
- 多通貨対応
- 返金ポリシー
- セキュリティ
```

## 🚀 **Phase 3: 差別化機能**

### **T3-001: 即座撮影リクエスト基盤**
**期間**: 5日  
**優先度**: 🔴 緊急  
**依存関係**: T2-006

**タスク内容**:
- ゲスト機能
- 位置情報管理
- リアルタイムマッチング基盤
- 基本UI

**実行プロンプト**:
```markdown
## タスク: 即座撮影リクエスト基盤実装

### 背景と目的
ShutterHub v2の差別化機能である即座撮影リクエストの基盤を実装します。
`instant-photo-request.mdc`の要件に従って、「撮影業界のUber」の基盤システムを構築してください。

### 技術要件
- ゲスト機能（認証不要）
- 位置情報API
- Supabase Realtime
- 地理的検索

### 実装手順
1. ゲスト機能設計
2. 位置情報管理システム
3. リアルタイムマッチング基盤
4. 基本UI実装
5. 地理的検索機能
6. セッション管理

### 期待される成果物
- [ ] ゲスト機能設計
- [ ] 位置情報管理システム
- [ ] リアルタイム基盤
- [ ] 基本UI
- [ ] 地理的検索

### 特別な考慮事項
- `instant-photo-request.mdc`の全要件
- プライバシー保護
- 位置情報精度
- リアルタイム性能
```

### **T3-002: カメラマンマッチングシステム**
**期間**: 4日  
**優先度**: 🔴 緊急  
**依存関係**: T3-001

**タスク内容**:
- マッチングアルゴリズム
- カメラマンオンライン状態
- 応答管理
- 料金計算

**実行プロンプト**:
```markdown
## タスク: カメラマンマッチングシステム実装

### 背景と目的
即座撮影リクエストのマッチングシステムを実装します。
`instant-photo-request.mdc`のマッチングアルゴリズム要件に従って、効率的なマッチングシステムを構築してください。

### 技術要件
- マッチングアルゴリズム
- リアルタイム状態管理
- 応答時間管理
- 動的料金計算

### 実装手順
1. マッチングアルゴリズム実装
2. カメラマン状態管理
3. 応答時間管理
4. 料金計算システム
5. マッチング履歴
6. 最適化機能

### 期待される成果物
- [ ] マッチングアルゴリズム
- [ ] 状態管理システム
- [ ] 応答管理機能
- [ ] 料金計算システム
- [ ] マッチング履歴

### 特別な考慮事項
- マッチング精度
- 応答速度
- 公平性確保
- パフォーマンス最適化
```

### **T3-003: StudioWiki基盤**
**期間**: 4日  
**優先度**: 🟡 重要  
**依存関係**: T2-004

**タスク内容**:
- スタジオ情報管理
- Wiki編集機能
- 検索機能
- 基本評価システム

**実行プロンプト**:
```markdown
## タスク: StudioWiki基盤実装

### 背景と目的
ShutterHub v2のStudioWiki機能を実装します。
`studio-wiki.mdc`の要件に従って、スタジオ情報の一元化プラットフォームを構築してください。

### 技術要件
- Wiki編集システム
- 変更履歴管理
- 検索・フィルタリング
- 評価システム連携

### 実装手順
1. スタジオテーブル設計
2. Wiki編集機能
3. 変更履歴管理
4. 検索・フィルタリング
5. 評価システム連携
6. 画像ギャラリー

### 期待される成果物
- [ ] スタジオテーブル設計
- [ ] Wiki編集機能
- [ ] 変更履歴システム
- [ ] 検索機能
- [ ] 評価連携

### 特別な考慮事項
- `studio-wiki.mdc`の全要件
- 情報の信頼性
- 編集権限管理
- 検索性能
```

### **T3-004: 撮影会連動評価システム**
**期間**: 3日  
**優先度**: 🟡 重要  
**依存関係**: T3-003, T2-004

**タスク内容**:
- 撮影会参加者限定評価
- 役割別評価項目
- 評価権限管理
- 集計・表示

**実行プロンプト**:
```markdown
## タスク: 撮影会連動評価システム実装

### 背景と目的
StudioWikiの撮影会連動評価システムを実装します。
`studio-wiki.mdc`の評価システム要件に従って、信頼性の高い評価システムを構築してください。

### 技術要件
- 評価権限管理
- 役割別評価項目
- 評価集計
- 透明性確保

### 実装手順
1. 評価権限管理システム
2. 役割別評価フォーム
3. 評価集計機能
4. 評価表示システム
5. 統計分析機能
6. 不正防止機能

### 期待される成果物
- [ ] 評価権限管理
- [ ] 役割別評価フォーム
- [ ] 評価集計システム
- [ ] 評価表示機能
- [ ] 統計分析

### 特別な考慮事項
- 評価の信頼性
- 多角的視点
- 透明性確保
- 不正防止
```

### **T3-005: PWA対応**
**期間**: 3日  
**優先度**: 🟡 重要  
**依存関係**: T1-001

**タスク内容**:
- PWA設定
- オフライン対応
- プッシュ通知
- アプリインストール

**実行プロンプト**:
```markdown
## タスク: PWA対応実装

### 背景と目的
ShutterHub v2のPWA対応を実装します。
`system-requirements.mdc`のPWA要件に従って、ネイティブアプリ風のユーザー体験を提供してください。

### 技術要件
- Service Worker
- Web App Manifest
- Push Notifications
- オフライン対応

### 実装手順
1. Web App Manifest設定
2. Service Worker実装
3. オフライン対応
4. プッシュ通知設定
5. インストールプロンプト
6. ボトムナビゲーション

### 期待される成果物
- [ ] Web App Manifest
- [ ] Service Worker
- [ ] オフライン機能
- [ ] プッシュ通知
- [ ] インストール機能

### 特別な考慮事項
- `system-requirements.mdc`のPWA要件
- オフライン体験
- 通知権限管理
- パフォーマンス最適化
```

### **T3-006: プッシュ通知システム**
**期間**: 3日  
**優先度**: 🔴 緊急  
**依存関係**: T3-005

**タスク内容**:
- Web Push API
- 通知設定管理
- 通知テンプレート
- 配信スケジュール

**実行プロンプト**:
```markdown
## タスク: プッシュ通知システム実装

### 背景と目的
ShutterHub v2のプッシュ通知システムを実装します。
`system-requirements.mdc`の通知要件に従って、効果的な通知システムを構築してください。

### 技術要件
- Web Push API
- FCM連携
- 通知設定管理
- タイムゾーン対応

### 実装手順
1. Web Push API設定
2. FCM連携
3. 通知設定管理
4. 通知テンプレート
5. 配信スケジュール
6. 通知履歴管理

### 期待される成果物
- [ ] Web Push API設定
- [ ] 通知設定管理
- [ ] 通知テンプレート
- [ ] 配信システム
- [ ] 通知履歴

### 特別な考慮事項
- `system-requirements.mdc`の通知要件
- ユーザー設定尊重
- タイムゾーン対応
- 配信頻度制限
```

## 📋 **Phase 4: 最適化・リリース準備**

### **T4-001: パフォーマンス最適化**
**期間**: 3日  
**優先度**: 🟡 重要  
**依存関係**: 全Phase 3タスク

**タスク内容**:
- Core Web Vitals最適化
- 画像最適化
- バンドルサイズ最適化
- キャッシュ戦略

**実行プロンプト**:
```markdown
## タスク: パフォーマンス最適化

### 背景と目的
ShutterHub v2のパフォーマンスを最適化します。
`system-requirements.mdc`のパフォーマンス目標を達成するための最適化を実施してください。

### 技術要件
- Core Web Vitals
- 画像最適化
- コード分割
- キャッシュ戦略

### 実装手順
1. Lighthouse監査実施
2. Core Web Vitals最適化
3. 画像最適化実装
4. コード分割最適化
5. キャッシュ戦略実装
6. パフォーマンス監視

### 期待される成果物
- [ ] Lighthouse スコア90+
- [ ] Core Web Vitals達成
- [ ] 画像最適化
- [ ] バンドル最適化
- [ ] キャッシュ戦略

### 特別な考慮事項
- `system-requirements.mdc`の目標値
- ユーザー体験向上
- モバイル最適化
- 継続的監視
```

### **T4-002: セキュリティ強化**
**期間**: 2日  
**優先度**: 🔴 緊急  
**依存関係**: 全Phase 3タスク

**タスク内容**:
- セキュリティヘッダー設定
- CSRF/XSS対策強化
- 入力値検証強化
- セキュリティ監査

**実行プロンプト**:
```markdown
## タスク: セキュリティ強化実装

### 背景と目的
ShutterHub v2のセキュリティを強化します。
`system-requirements.mdc`のセキュリティ要件を満たすための対策を実施してください。

### 技術要件
- セキュリティヘッダー
- CSRF/XSS対策
- 入力値検証
- 脆弱性スキャン

### 実装手順
1. セキュリティヘッダー設定
2. CSRF/XSS対策強化
3. 入力値検証強化
4. 脆弱性スキャン実施
5. セキュリティテスト
6. 監査ログ設定

### 期待される成果物
- [ ] セキュリティヘッダー設定
- [ ] CSRF/XSS対策
- [ ] 入力値検証
- [ ] 脆弱性対策
- [ ] セキュリティテスト

### 特別な考慮事項
- `system-requirements.mdc`のセキュリティ要件
- GDPR対応
- 継続的セキュリティ
- インシデント対応
```

### **T4-003: 法務対応**
**期間**: 2日  
**優先度**: 🔴 緊急  
**依存関係**: なし（並行作業可能）

**タスク内容**:
- 利用規約作成
- プライバシーポリシー作成
- Cookie同意管理
- GDPR対応

**実行プロンプト**:
```markdown
## タスク: 法務対応実装

### 背景と目的
ShutterHub v2の法務対応を実装します。
`system-requirements.mdc`の法務要件に従って、コンプライアンス対応を完了してください。

### 技術要件
- 利用規約表示
- プライバシーポリシー
- Cookie同意管理
- データ削除機能

### 実装手順
1. 利用規約作成・表示
2. プライバシーポリシー作成・表示
3. Cookie同意バナー実装
4. データ削除機能実装
5. GDPR対応機能
6. 法務確認・承認

### 期待される成果物
- [ ] 利用規約ページ
- [ ] プライバシーポリシーページ
- [ ] Cookie同意管理
- [ ] データ削除機能
- [ ] GDPR対応

### 特別な考慮事項
- `system-requirements.mdc`の法務要件
- 多言語対応
- 法的有効性
- ユーザビリティ
```

### **T4-004: テスト実装**
**期間**: 4日  
**優先度**: 🔴 緊急  
**依存関係**: 全機能実装完了

**タスク内容**:
- ユニットテスト
- 統合テスト
- E2Eテスト
- パフォーマンステスト

**実行プロンプト**:
```markdown
## タスク: 包括的テスト実装

### 背景と目的
ShutterHub v2の包括的テストを実装します。
`development.mdc`のテスト要件に従って、品質保証のためのテストスイートを構築してください。

### 技術要件
- Jest（ユニットテスト）
- Playwright（E2Eテスト）
- テストカバレッジ80%+
- CI/CD連携

### 実装手順
1. ユニットテスト実装
2. 統合テスト実装
3. E2Eテスト実装
4. パフォーマンステスト
5. テストカバレッジ確認
6. CI/CD連携

### 期待される成果物
- [ ] ユニットテストスイート
- [ ] 統合テストスイート
- [ ] E2Eテストスイート
- [ ] テストカバレッジ80%+
- [ ] CI/CD連携

### 特別な考慮事項
- `development.mdc`のテスト要件
- テストカバレッジ目標
- 継続的テスト
- 品質保証
```

### **T4-005: デプロイメント準備**
**期間**: 2日  
**優先度**: 🔴 緊急  
**依存関係**: T4-001, T4-002, T4-003

**タスク内容**:
- 本番環境設定
- 環境変数設定
- ドメイン設定
- SSL証明書設定

**実行プロンプト**:
```markdown
## タスク: 本番デプロイメント準備

### 背景と目的
ShutterHub v2の本番デプロイメントを準備します。
`system-requirements.mdc`の本番環境要件に従って、安全で安定したデプロイメント環境を構築してください。

### 技術要件
- Vercel本番環境
- 環境変数管理
- ドメイン設定
- SSL証明書

### 実装手順
1. Vercel本番環境設定
2. 環境変数設定
3. カスタムドメイン設定
4. SSL証明書設定
5. デプロイメントテスト
6. 監視設定

### 期待される成果物
- [ ] 本番環境設定
- [ ] 環境変数設定
- [ ] ドメイン設定
- [ ] SSL証明書設定
- [ ] 監視設定

### 特別な考慮事項
- `system-requirements.mdc`の本番要件
- セキュリティ設定
- パフォーマンス設定
- 監視・アラート
```

## 📊 **進捗管理・品質保証**

### **タスク管理ルール**
1. **各タスクの開始前**に対応するプロンプトを実行
2. **実装完了後**に成果物チェックリストを確認
3. **コードレビュー**を必須とする
4. **テスト実装**を並行して進める

### **品質チェックポイント**
- [ ] プロンプト要件を満たしているか
- [ ] `system-requirements.mdc`の要件を満たしているか
- [ ] テストカバレッジ80%以上
- [ ] Lighthouse スコア90以上
- [ ] セキュリティ要件クリア

### **リスク管理**
- **技術的リスク**: 各フェーズ終了時に技術検証
- **スケジュールリスク**: 週次進捗確認
- **品質リスク**: 継続的テスト実行
- **セキュリティリスク**: 定期的セキュリティ監査

この実装計画書により、機能漏れを防ぎ、効率的で高品質なShutterHub v2の開発が可能になります。
