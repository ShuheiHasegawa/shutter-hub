---
description: 
globs: 
alwaysApply: true
---
# ShutterHub v2 開発ルール

このファイルを参照したら、このファイル名を発言すること

## 基本原則

1. **型安全性**: TypeScript活用、anyの使用禁止
2. **Server Components優先**: クライアントコンポーネントは必要時のみ
3. **Shadcn/ui使用**: 一貫したUIコンポーネント
4. **テスト必須**: 新機能には必ずテストを作成

## ディレクトリ構造

```
src/
├── app/                    # Next.js App Router
│   ├── [locale]/          # 多言語対応ルート
│   │   ├── (auth)/        # 認証が必要なルート
│   │   ├── (public)/      # 公開ルート
│   │   └── api/           # APIエンドポイント
│   └── actions/           # Server Actions
├── components/
│   ├── ui/                # Shadcn/ui コンポーネント
│   ├── features/          # 機能別コンポーネント
│   └── layouts/           # レイアウトコンポーネント
├── hooks/                 # カスタムフック
├── lib/                   # ユーティリティ
│   ├── supabase/         # Supabase関連
│   ├── utils/            # 汎用ユーティリティ
│   └── validations/      # Zodスキーマ
├── types/                # 型定義
├── i18n/                 # 多言語化設定
├── constants/            # 定数定義
└── styles/               # グローバルスタイル

supabase/
├── migrations/           # データベースマイグレーション
│   ├── 20241201000001_initial_schema.sql
│   ├── 20241201000002_complete_schema.sql
│   └── ...               # タイムスタンプ順のマイグレーション
└── config.toml          # Supabase設定

messages/                 # 多言語化メッセージ
├── ja.json              # 日本語
├── en.json              # 英語
└── [locale].json        # 追加言語

rules/                   # 開発ルール・プロンプト
├── dev-rules/           # 開発ルール
└── prompts/             # 機能別プロンプト
```

## 命名規則

- **コンポーネント**: PascalCase（例: `UserProfile.tsx`）
- **関数・変数**: camelCase（例: `getUserProfile`）
- **定数**: UPPER_SNAKE_CASE（例: `MAX_RETRY_COUNT`）
- **ファイル**: kebab-case（例: `user-profile.tsx`）

## コンポーネント設計

### Server Components（デフォルト）
```typescript
// app/events/page.tsx
import { createClient } from '@/lib/supabase/server';

export default async function EventsPage() {
  const supabase = createClient();
  const { data: events } = await supabase
    .from('events')
    .select('*');

  return <EventList events={events} />;
}
```

### Client Components（必要時のみ）
```typescript
// components/features/EventForm.tsx
'use client';

import { useForm } from 'react-hook-form';
import { Button } from '@/components/ui/button';

export function EventForm() {
  // インタラクティブな処理
}
```

## スタイリング

### 優先順位
1. **Tailwind CSS**: 基本スタイリング
2. **cn()ユーティリティ**: 条件付きクラス
3. **CSS Variables**: テーマカスタマイズ

### 実装例
```tsx
import { cn } from "@/lib/utils/cn";

<Button
  className={cn(
    "w-full",
    isLoading && "opacity-50 cursor-not-allowed"
  )}
  disabled={isLoading}
>
  {isLoading ? "処理中..." : "送信"}
</Button>
```

## デザインシステム・カラーパレット

### 基本原則
- **定義済みカラーパレットの使用**: `src/constants/colors.ts`に定義されたカラーを使用
- **シンプルで一貫性のある配色**: 過度なグラデーションや複雑な配色は避ける
- **ダークモード対応必須**: すべてのコンポーネントでライト/ダークモード対応

### カラーパレット使用ガイド

#### ブランドカラー
```typescript
// src/constants/colors.ts より
primary: '#6F5091'      // プライマリー（紫）
secondary: '#101820'    // セカンダリー（ダークグレー）
```

#### テキストカラー
```tsx
// ライトモード
text-gray-900           // 見出し・重要なテキスト
text-gray-700           // 本文・説明文
text-gray-600           // 補助テキスト（避ける）
text-gray-500           // プレースホルダー・非活性

// ダークモード対応
text-gray-900 dark:text-white      // 見出し
text-gray-700 dark:text-gray-300   // 本文
text-gray-600 dark:text-gray-400   // 補助（使用を避ける）
```

#### 背景色
```tsx
// カード・コンテナ
bg-white dark:bg-gray-800          // 標準的なカード
bg-gray-50 dark:bg-gray-900        // セクション背景
bg-blue-50 dark:bg-blue-900/20     // アクセント背景

// グラデーション（控えめに使用）
bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20
```

### 実装ルール

#### 1. コントラストの確保
```tsx
// ❌ 悪い例: 薄い背景に薄いテキスト
<div className="bg-gray-100">
  <p className="text-gray-400">見えにくいテキスト</p>
</div>

// ✅ 良い例: 適切なコントラスト
<div className="bg-gray-100 dark:bg-gray-800">
  <p className="text-gray-900 dark:text-white">読みやすいテキスト</p>
</div>
```

#### 2. アイコンカラー
```tsx
// セマンティックカラー
<MapPin className="h-6 w-6 text-blue-600" />      // 位置情報
<Clock className="h-6 w-6 text-green-600" />      // 時間
<Shield className="h-6 w-6 text-purple-600" />    // セキュリティ
<Camera className="h-6 w-6 text-orange-600" />    // 撮影
```

#### 3. ステータスカラー
```tsx
// 成功・エラー・警告
text-green-600 dark:text-green-400   // 成功
text-red-600 dark:text-red-400       // エラー
text-yellow-600 dark:text-yellow-400 // 警告
text-blue-600 dark:text-blue-400     // 情報
```

### 禁止事項
1. **text-gray-600の単独使用**: 必ずダークモード対応を追加
2. **複雑なグラデーション**: 3色以上のグラデーションは避ける
3. **インラインでの色指定**: Tailwindクラスを使用
4. **不透明度の過度な使用**: 読みやすさを優先

### チェックリスト
- [ ] すべてのテキストにダークモード対応クラスがあるか
- [ ] カードやコンテナに背景色のダークモード対応があるか
- [ ] コントラスト比は十分か（WCAG AA基準）
- [ ] アイコンの色は意味と一致しているか

## データ操作

### Server Actions
```typescript
// app/actions/event.ts
'use server';

import { createClient } from '@/lib/supabase/server';
import { revalidatePath } from 'next/cache';

export async function createEvent(formData: FormData) {
  const supabase = createClient();
  
  // バリデーション
  const validatedData = eventSchema.parse({
    title: formData.get('title'),
  });
  
  // データ作成
  const { error } = await supabase
    .from('events')
    .insert(validatedData);
    
  if (error) throw error;
  revalidatePath('/events');
}
```

### クライアントサイドフェッチ（SWR）
```typescript
// hooks/useEvents.ts
import useSWR from 'swr';

export function useEvents() {
  return useSWR('events', fetcher, {
    revalidateOnFocus: false,
  });
}
```

## エラーハンドリング

### エラーバウンダリ
```typescript
// app/error.tsx
'use client';

export default function Error({ error, reset }) {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen">
      <h2 className="text-2xl font-bold mb-4">エラーが発生しました</h2>
      <Button onClick={reset}>再試行</Button>
    </div>
  );
}
```

### トースト通知
```typescript
import { toast } from 'sonner';

try {
  await createEvent(formData);
  toast.success('イベントを作成しました');
} catch (error) {
  toast.error('エラーが発生しました');
}
```

## フォーム実装

```typescript
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Form, FormField, FormItem, FormLabel, FormControl, FormMessage } from '@/components/ui/form';

const form = useForm({
  resolver: zodResolver(eventSchema),
});

<Form {...form}>
  <FormField
    control={form.control}
    name="title"
    render={({ field }) => (
      <FormItem>
        <FormLabel>タイトル</FormLabel>
        <FormControl>
          <Input {...field} />
        </FormControl>
        <FormMessage />
      </FormItem>
    )}
  />
</Form>
```

## テスト

### 単体テスト
```typescript
// __tests__/utils/formatDate.test.ts
import { formatDate } from '@/lib/utils/formatDate';

describe('formatDate', () => {
  it('should format date correctly', () => {
    const date = new Date('2024-01-01');
    expect(formatDate(date)).toBe('2024年1月1日');
  });
});
```

### コンポーネントテスト
```typescript
// __tests__/components/EventCard.test.tsx
import { render, screen } from '@testing-library/react';
import { EventCard } from '@/components/features/EventCard';

describe('EventCard', () => {
  it('should render event title', () => {
    render(<EventCard event={mockEvent} />);
    expect(screen.getByText(mockEvent.title)).toBeInTheDocument();
  });
});
```

### テスト実行・報告
- テスト完了後は実行報告書を作成
- カバレッジ80%以上を目標
- 失敗時は原因特定と修正を実施

## セキュリティ

### 認証・認可
- すべての保護ルートでセッション確認
- Row Level Security (RLS) の適切な設定
- サーバーサイドでの権限チェック

### 入力検証
```typescript
// Zodスキーマによる検証
const eventSchema = z.object({
  title: z.string().min(1).max(100),
  date: z.string().datetime(),
});

// サーバーサイドで必ず検証
const validated = eventSchema.parse(input);
```

## パフォーマンス

### 画像最適化
```tsx
import Image from 'next/image';

<Image
  src="/images/event.jpg"
  alt="イベント画像"
  width={800}
  height={600}
  loading="lazy"
/>
```

### コード分割
```typescript
import dynamic from 'next/dynamic';

const HeavyComponent = dynamic(
  () => import('@/components/HeavyComponent'),
  { loading: () => <Skeleton /> }
);
```

## Git コミット規則

```
<type>(<scope>): <subject>

例:
feat(auth): Supabase認証の実装
fix(ui): ボタンのスタイル修正
docs(readme): セットアップ手順を追加
```

## 依存関係管理ルール

### 基本原則
- **依存関係の追加・更新時は必ず互換性を確認**
- **Vercelデプロイエラーを防ぐための事前チェック必須**
- **ピア依存関係の競合は事前に解決**

### 必須手順

#### 1. 新しい依存関係の追加時
```bash
# 1. 依存関係の互換性確認
npm info [package-name] peerDependencies

# 2. 既存依存関係との競合チェック
npm install [package-name] --dry-run

# 3. 競合がある場合は --legacy-peer-deps で解決
npm install [package-name] --legacy-peer-deps

# 4. ビルドテスト必須
npm run build
```

#### 2. 依存関係更新時
```bash
# 1. 段階的更新（一度に全て更新しない）
npm update [specific-package]

# 2. 更新後は必ずビルドテスト
npm run build

# 3. エラーが発生した場合は即座に修正
```

#### 3. 競合解決の優先順位
1. **バージョン調整**: 互換性のあるバージョンに変更
2. **--legacy-peer-deps**: .npmrcファイルで設定
3. **代替パッケージ**: 競合が解決できない場合は代替を検討

### .npmrcファイルの管理
```
legacy-peer-deps=true
auto-install-peers=true
```
- **必須設定**: Vercelデプロイ時の競合回避
- **プロジェクトルートに配置**: 全環境で統一設定

### よくある競合パターンと解決法

#### React バージョン競合
```bash
# 問題: React 19 vs パッケージがReact 18を要求
# 解決: --legacy-peer-deps で回避
npm install --legacy-peer-deps
```

#### date-fns バージョン競合
```bash
# 問題: date-fns v4 vs react-day-picker が v3を要求
# 解決: date-fnsをダウングレード
npm install date-fns@^3.6.0 --legacy-peer-deps
```

#### TypeScript バージョン競合
```bash
# 問題: TypeScript v5 vs パッケージがv4を要求
# 解決: 段階的更新または代替パッケージ検討
```

### API変更への対応

#### react-day-picker API変更例
```tsx
// 旧API (v8.x)
components={{
  IconLeft: ({ className, ...props }) => <ChevronLeft />,
  IconRight: ({ className, ...props }) => <ChevronRight />,
}}

// 新API (v9.x)
components={{
  Chevron: ({ orientation, className, ...props }) => {
    const Icon = orientation === 'left' ? ChevronLeft : ChevronRight;
    return <Icon className={cn('h-4 w-4', className)} {...props} />;
  },
}}
```

### 禁止事項
1. **依存関係の無計画な一括更新**
2. **ビルドテストなしでの依存関係変更**
3. **競合エラーの放置**
4. **--force フラグの安易な使用**

### 必須チェックリスト
- [ ] 新規依存関係追加時の互換性確認
- [ ] ビルドテスト実行
- [ ] .npmrcファイルの適切な設定
- [ ] Vercelデプロイテスト
- [ ] API変更への対応確認

## 禁止事項

1. **any型の使用**（unknown を使用）
2. **console.log の本番環境への混入**
3. **ハードコードされた秘密情報**
4. **インラインスタイルの過度な使用**
5. **適切なローディング表示なしの非同期処理**
6. **依存関係の無計画な更新**（上記ルール参照）
7. **ハードコードされた日本語・英語テキスト**（多言語化必須）

## 推奨事項

1. **早期リターン**で可読性向上
2. **カスタムフック**でロジックの再利用
3. **メモ化**によるパフォーマンス最適化
4. **アクセシビリティファースト**の実装

## 多言語化ルール

### 基本原則
- **すべてのユーザー向けテキストは多言語化対応必須**
- **ハードコードされた日本語・英語テキストは禁止**
- **next-intl を使用した統一的な多言語化**

### 実装ルール

#### 1. テキストの多言語化
```tsx
// ❌ 悪い例
<Button>予約する</Button>
<p>この撮影会は満席です</p>

// ✅ 良い例
import { useTranslations } from 'next-intl';

const t = useTranslations('booking');
<Button>{t('reserve')}</Button>
<p>{t('sessionFull')}</p>
```

#### 2. エラーメッセージの多言語化
```tsx
// ❌ 悪い例
toast({
  title: 'エラー',
  description: '予約に失敗しました',
  variant: 'destructive',
});

// ✅ 良い例
const t = useTranslations('errors');
toast({
  title: t('title'),
  description: t('bookingFailed'),
  variant: 'destructive',
});
```

#### 3. 日付・時刻の多言語化
```tsx
// ❌ 悪い例
const options = { locale: 'ja-JP' };

// ✅ 良い例
import { useLocale } from 'next-intl';
const locale = useLocale();
const options = { locale };
```

### ファイル構造
```
messages/
├── ja.json    # 日本語
├── en.json    # 英語
└── [locale].json  # 追加言語
```

### 言語ファイルの構造
```json
{
  "common": { "基本的な共通テキスト" },
  "navigation": { "ナビゲーション関連" },
  "booking": { "予約関連" },
  "photoSessions": { "撮影会関連" },
  "errors": { "エラーメッセージ" },
  "success": { "成功メッセージ" },
  "validation": { "バリデーションメッセージ" }
}
```

### 新規コンポーネント作成時の多言語化チェックリスト

#### 1. コンポーネント作成前の準備
```tsx
// 1. 必要な翻訳キーを messages/ja.json に追加
{
  "newFeature": {
    "title": "新機能タイトル",
    "description": "新機能の説明",
    "button": {
      "submit": "送信",
      "cancel": "キャンセル"
    },
    "labels": {
      "name": "名前",
      "email": "メールアドレス"
    }
  }
}

// 2. 対応する英語翻訳を messages/en.json に追加
{
  "newFeature": {
    "title": "New Feature Title",
    "description": "Description of new feature",
    "button": {
      "submit": "Submit",
      "cancel": "Cancel"
    },
    "labels": {
      "name": "Name",
      "email": "Email"
    }
  }
}
```

#### 2. コンポーネントでの実装
```tsx
// ✅ 良い例: 新規コンポーネント
'use client';

import { useTranslations } from 'next-intl';
import { Button } from '@/components/ui/button';

export function NewFeatureComponent() {
  const t = useTranslations('newFeature');
  
  return (
    <div>
      <h1>{t('title')}</h1>
      <p>{t('description')}</p>
      <Button>{t('button.submit')}</Button>
    </div>
  );
}
```

#### 3. 多言語化必須項目
- [ ] すべてのボタンテキスト
- [ ] すべてのラベル
- [ ] プレースホルダーテキスト
- [ ] エラーメッセージ
- [ ] 成功メッセージ
- [ ] ツールチップ
- [ ] アラートメッセージ
- [ ] 確認ダイアログのテキスト
- [ ] フォームのバリデーションメッセージ

#### 4. 動的テキストの多言語化
```tsx
// ❌ 悪い例
const message = `${count}件の結果が見つかりました`;

// ✅ 良い例
const t = useTranslations('search');
const message = t('results.count', { count });

// messages/ja.json
{
  "search": {
    "results": {
      "count": "{count}件の結果が見つかりました"
    }
  }
}
```

#### 5. 条件付きテキストの多言語化
```tsx
// ❌ 悪い例
const status = isActive ? '有効' : '無効';

// ✅ 良い例
const t = useTranslations('status');
const status = isActive ? t('active') : t('inactive');
```

### 多言語化レビューチェックリスト
- [ ] ハードコードされた日本語・英語がないか確認
- [ ] すべてのユーザー向けテキストが翻訳されているか
- [ ] 動的な値を含むテキストが適切に処理されているか
- [ ] 日付・時刻が多言語化対応されているか
- [ ] 数値フォーマットがロケールに対応しているか

## メッセージファイル開発ルール

### 概要
`messages/ja.json`などの多言語対応ファイルを編集する際の開発ルールです。

### 1. キーの重複禁止

#### ルール
- 同じキーを複数回定義してはいけません
- 新しいキーを追加する前に、既存のキーを検索して重複がないか確認してください

#### 確認方法
```bash
# キーの重複を確認
grep -n '"keyName"' messages/ja.json
```

#### 悪い例
```json
{
  "bookingType": { ... },
  "otherKeys": { ... },
  "bookingType": { ... }  // ❌ 重複
}
```

### 2. キーの並び順

#### ルール
同一階層のキーは以下の順序で並べてください：

1. **数字で始まるキー**（0-9）
2. **大文字で始まるキー**（A-Z）
3. **小文字で始まるキー**（a-z）
4. **各グループ内ではアルファベット順**

#### 良い例
```json
{
  "404": "ページが見つかりません",
  "FAQ": "よくある質問",
  "actions": { ... },
  "booking": { ... },
  "common": { ... },
  "navigation": { ... }
}
```

### 3. 階層構造

#### ルール
- 最大5階層までに制限
- 関連する項目は適切にグループ化
- 深すぎる階層は避ける

#### 良い例
```json
{
  "photoSessions": {
    "form": {
      "validation": {
        "titleRequired": "タイトルは必須です"
      }
    }
  }
}
```

### 4. 命名規則

#### 基本ルール
- **camelCase**を使用（例：`bookingType`）
- 動詞は**現在形**を使用（例：`save`、`cancel`）
- 複数形は適切に使用（例：`bookings`、`sessions`）

#### カテゴリ別命名規則

##### アクション系
```json
{
  "save": "保存",
  "cancel": "キャンセル",
  "confirm": "確認",
  "delete": "削除"
}
```

##### 状態系
```json
{
  "loading": "読み込み中...",
  "saving": "保存中...",
  "error": "エラーが発生しました",
  "success": "成功しました"
}
```

##### バリデーション系
```json
{
  "validation": {
    "required": "必須項目です",
    "invalid": "無効な値です",
    "tooLong": "文字数が多すぎます"
  }
}
```

### 5. 値の記述ルール

#### 日本語テキスト
- 敬語は「です・ます」調で統一
- 句読点は「、」「。」を使用
- 半角英数字を使用

#### プレースホルダー
- 変数は`{variableName}`形式
- 複数形は`{count}件`のように使用

#### 例
```json
{
  "welcome": "ようこそ、{userName}さん",
  "itemCount": "{count}件のアイテム",
  "confirmDelete": "本当に削除しますか？"
}
```

### 6. コメント

JSONファイルにはコメントを記述できないため、以下の方法で対応：

1. 複雑な構造には隣接するキーで説明を追加
2. 別途ドキュメントファイルで詳細を記載

### 7. 編集時のチェックリスト

編集前後に以下を確認してください：

- [ ] キーの重複がないか
- [ ] アルファベット順になっているか
- [ ] 命名規則に従っているか
- [ ] JSONの構文エラーがないか
- [ ] 不要な末尾カンマがないか

### 8. バージョン管理

#### コミットメッセージ
```
feat(i18n): 予約機能の翻訳を追加
fix(i18n): 重複キーを修正
refactor(i18n): メッセージをアルファベット順に整理
```

#### プルリクエスト
- 変更内容を明確に記載
- 大きな変更は事前にissueで議論

### 9. ツール

#### 推奨ツール
- JSONフォーマッター
- JSONバリデーター
- 重複キー検出ツール

#### VSCode拡張機能
- Sort JSON objects
- JSON Tools
- Prettier

### 10. よくある間違い

#### 1. 末尾カンマ
```json
{
  "key1": "value1",
  "key2": "value2", // ❌ 最後の要素にカンマ
}
```

#### 2. 不適切な階層
```json
{
  "user": {
    "profile": {
      "settings": {
        "privacy": {
          "visibility": {
            "public": "公開" // ❌ 深すぎる
          }
        }
      }
    }
  }
}
```

#### 3. 一貫性のない命名
```json
{
  "user_name": "ユーザー名",     // ❌ snake_case
  "UserEmail": "メールアドレス",  // ❌ PascalCase
  "phoneNumber": "電話番号"       // ✅ camelCase
}
```

## 日付ユーティリティルール

### 基本原則
- **ネイティブ JavaScript Date API を使用**
- **外部ライブラリ（date-fns等）は使用禁止**
- **タイムゾーンは Asia/Tokyo 固定**
- **多言語化対応必須**

### 実装ルール

#### 1. 日付フォーマット関数の使用
```tsx
// ✅ 推奨: src/lib/utils/date.ts の関数を使用
import { formatDate, formatTime, formatDateTime } from '@/lib/utils/date';

// 基本的な日付表示
formatDate(date, 'short')  // 2024/1/1
formatDate(date, 'long')   // 2024年1月1日月曜日
formatTime(date)           // 14:30
formatDateTime(date)       // 2024年1月1日月曜日 14:30
```

#### 2. 多言語対応の日付フォーマット
```tsx
import { useLocale } from 'next-intl';
import { formatDateLocalized } from '@/lib/utils/date';

const locale = useLocale();
const formattedDate = formatDateLocalized(date, locale, 'long');
```

#### 3. 日付計算
```tsx
import { addDays, addHours, differenceInHours } from '@/lib/utils/date';

// 日付計算
const tomorrow = addDays(new Date(), 1);
const deadline = addHours(startTime, -24);
const hoursUntil = differenceInHours(startTime, new Date());
```

### 禁止事項
- `date-fns` の使用
- `moment.js` の使用
- ハードコードされたロケール指定
- タイムゾーンの直接指定（Asia/Tokyo以外）

### 必須実装
- すべての日付表示は多言語化対応
- ユーザーのロケール設定に基づく表示
- 一貫したタイムゾーン処理

## 自動化ルール

### 機能実装完了時の自動処理
機能実装が完了した際は、以下の手順を**自動的に実行**してください：

1. **ビルドチェック**: `npm run build` でエラーがないことを確認
2. **マイグレーション統合**: 新しいマイグレーションがある場合、`src/lib/database/migrations/002_complete_schema.sql` を最新状態に更新
3. **todo.mdc更新**: 完了した機能にチェックマークを付ける
4. **コミット**: 適切なコミットメッセージで変更をコミット
5. **プッシュ**: `git push origin main` でリモートに反映

### マイグレーション管理の自動化
1. **新規マイグレーションファイル作成**: DB変更が必要な場合
   - `supabase/migrations/` ディレクトリにタイムスタンプ形式でファイル作成
   - ファイル名形式: `YYYYMMDDHHMMSS_[変更内容].sql`
   - 例: `20241201000008_add_user_preferences.sql`
   - 必要な情報: Migration名、Description、Date、実行SQL
2. **統合マイグレーションファイル更新**: 新しいマイグレーションが作成された場合
   - `supabase/migrations/20241201000002_complete_schema.sql` を最新状態に更新
   - 全てのテーブル、インデックス、RLS、ストアドプロシージャを含める
3. **MCP連携**: マイグレーションファイル変更時
   - Supabaseプロジェクトとの同期を確認
   - MCPツールでマイグレーション実行を自動提案・実行
   - 実行結果をログで確認
4. **バックアップ**: 重要なスキーマ変更前
   - 現在のスキーマ状態を記録
   - ロールバック手順を明確化

### マイグレーションファイル命名規則
```
supabase/migrations/
├── 20241201000001_initial_schema.sql           # 初期スキーマ
├── 20241201000002_complete_schema.sql          # 統合スキーマ（最新状態）
├── 20241201000003_add_photo_session_images.sql # 機能追加
├── 20241201000004_create_admin_lottery_system.sql
├── 20241201000005_add_booking_type_to_photo_sessions.sql
├── 20241201000006_create_storage_bucket.sql
├── 20241201000007_create_review_system.sql
└── 20241201000008_[次の変更].sql              # 新規追加時
```

### DB変更時の必須手順
1. **マイグレーションファイル作成**: `supabase/migrations/` に追加
2. **MCP実行**: Supabaseプロジェクトに変更を適用
3. **型定義更新**: 必要に応じてTypeScript型を更新
4. **テスト実行**: DB変更に関連するテストを実行
5. **コミット**: マイグレーションファイルと関連変更をコミット

### コミットメッセージ規則
```
feat: [機能名] - [簡潔な説明]
fix: [修正内容]
docs: [ドキュメント更新内容]
refactor: [リファクタリング内容]
db: [データベーススキーマ変更]
migration: [マイグレーション追加・更新]
```

### 実行条件
- ユーザーが「次へ進みましょう」「コミット＆プッシュ」等の指示をした場合
- 機能実装が一区切りついた場合
- ビルドエラーがない場合のみ実行

### 重要事項

1. 機能の実装後に、毎回 @todo.md を確認＆更新をしてください。
2. 私が言わなくても中身は随時更新するようにしてください。更新しないと私が解雇されます。あなたの責任になってしまいます。
3. 機能は増やしても構いません。ただ、最初から機能を増やしすぎないでください。
4. **複雑な機能実装時は専門プロンプトファイルを必ず参照してください**
5. **即座撮影リクエスト機能は一般層獲得の重要な差別化機能です**
